"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[686],{8955:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var o=t(3117),i=t(102),a=(t(7294),t(3905)),r=["components"],l={sidebar_position:2,title:"Loading service"},d="Working with Loading Service",s={unversionedId:"loading-store/loading-service",id:"loading-store/loading-service",isDocsHomePage:!1,title:"Loading service",description:"If you need a more sophisticated way to handle loading states, for a better integration with Angular dependency",source:"@site/docs/loading-store/loading-service.md",sourceDirName:"loading-store",slug:"/loading-store/loading-service",permalink:"/ngx-reactive-loading/docs/loading-store/loading-service",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/loading-store/loading-service.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Loading service"},sidebar:"tutorialSidebar",previous:{title:"Basic usage",permalink:"/ngx-reactive-loading/docs/loading-store/basic-usage"},next:{title:"Loading directive",permalink:"/ngx-reactive-loading/docs/loading-store/loading-directive"}},p=[{value:"Using with components",id:"using-with-components",children:[],level:2},{value:"API",id:"api",children:[{value:"<code>load()</code>",id:"load",children:[],level:3},{value:"<code>track()</code>",id:"track",children:[],level:3},{value:"<code>isLoading()</code>",id:"isloading",children:[],level:3},{value:"<code>someLoading()</code>",id:"someloading",children:[],level:3}],level:2},{value:"Using with modules",id:"using-with-modules",children:[{value:"Registering root loading service",id:"registering-root-loading-service",children:[],level:3},{value:"Registering feature loading service",id:"registering-feature-loading-service",children:[],level:3},{value:"Custom module configuration",id:"custom-module-configuration",children:[{value:"Event logger",id:"event-logger",children:[],level:4}],level:3}],level:2}],g={toc:p};function c(e){var n=e.components,t=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"working-with-loading-service"},"Working with Loading Service"),(0,a.kt)("p",null,"If you need a more sophisticated way to handle loading states, for a better integration with Angular dependency\ninjection, you can use a loading service that will expose the ",(0,a.kt)("a",{parentName:"p",href:"#loading-store"},"loading store")," api's."),(0,a.kt)("h2",{id:"using-with-components"},"Using with components"),(0,a.kt)("p",null,"To use the loading service with angular components and dependency injection you must provide the service into the\ncomponent provider invoking the static ",(0,a.kt)("inlineCode",{parentName:"p"},"componentProvider")," method of ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadingService"),". The loading service is subscribed\nto throughout the lifecycle of the component, and it will manage all your loading subscriptions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.component.ts",title:"example.component.ts"},"import { LoadingService } from 'ngx-reactive-loading';\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\ntype ComponentAction = 'add' | 'reload';\n\n@Component({\n  selector: 'app-example',\n  template: ``,\n  providers: [\n    LoadingService.componentProvider<ComponentAction>(['add', 'reload']),\n  ],\n})\nexport class ExampleComponent implements OnInit {\n  readonly loadingStoreState = this.loadingStore.state;\n  readonly isAdding$: Observableb<boolean> = this.loadingStoreState.add.$;\n  readonly isReloading$: Observable<boolean> = this.loadingStoreState.reload.$;\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly loadingStore: LoadingService<ComponentAction>\n  ) {}\n}\n")),(0,a.kt)("p",null,"With this setup you get a ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadingRegistry")," with the following methods:"),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"load"},(0,a.kt)("inlineCode",{parentName:"h3"},"load()")),(0,a.kt)("p",null,"Wrap the loading operator in the source observable. This allows to update the loading state of the given property\nautomatically after each emission and on complete."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.component.ts",title:"example.component.ts"},"import { LoadingService } from 'ngx-reactive-loading';\n\ntype ComponentAction = 'add' | 'reload';\n\n@Component({})\nexport class ExampleComponent {\n  constructor(\n    private readonly http: HttpClient,\n    private readonly loadingStore: LoadingService<ComponentAction>\n  ) {}\n\n  add() {\n    this.loadingStore.load(() => this.http.post('/', {}), 'add').subscribe();\n  }\n}\n")),(0,a.kt)("h3",{id:"track"},(0,a.kt)("inlineCode",{parentName:"h3"},"track()")),(0,a.kt)("p",null,"Set the loading state of the given key to true, then change it to false when the source complete or there is an error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.component.ts",title:"example.component.ts"},"import { LoadingService } from 'ngx-reactive-loading';\nimport { OnInit } from '@angular/core';\n\ntype ComponentAction = 'add' | 'reload';\n\n@Component({})\nexport class ExampleComponent implements OnInit {\n  constructor(\n    private readonly http: HttpClient,\n    private readonly loadingStore: LoadingService<ComponentAction>\n  ) {}\n\n  ngOnInit(): void {\n    this.http.post('/', {}).pipe(this.loadingService.track('add')).subscribe();\n  }\n}\n")),(0,a.kt)("h3",{id:"isloading"},(0,a.kt)("inlineCode",{parentName:"h3"},"isLoading()")),(0,a.kt)("p",null,"Listen to the changes of the given loading state property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.component.ts",title:"example.component.ts"},"import { LoadingService } from 'ngx-reactive-loading';\n\ntype ComponentAction = 'add' | 'reload';\n\n@Component({})\nexport class ExampleComponent {\n  readonly isAdding$: Observable<boolean> =\n    this.loadingService.isLoading('add');\n\n  constructor(private readonly loadingStore: LoadingService<ComponentAction>) {}\n}\n")),(0,a.kt)("h3",{id:"someloading"},(0,a.kt)("inlineCode",{parentName:"h3"},"someLoading()")),(0,a.kt)("p",null,"Listen to the state changes of the given properties and return true if it finds a state which is currently loading."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.component.ts",title:"example.component.ts"},"import { LoadingService } from 'ngx-reactive-loading';\n\ntype ComponentAction = 'add' | 'reload';\n\n@Component({})\nexport class ExampleComponent {\n  readonly isAddingOrDeleting$: Observable<boolean> =\n    this.loadingService.someLoading(['add', 'reload']);\n\n  constructor(private readonly loadingStore: LoadingService<ComponentAction>) {}\n}\n")),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"someLoading can listen to all properties!")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If you need to listen to all changes of the loading store state, you can provide an empty parameter\nto the ",(0,a.kt)("inlineCode",{parentName:"p"},"someLoading")," method."))),(0,a.kt)("h2",{id:"using-with-modules"},"Using with modules"),(0,a.kt)("p",null,"There are some scenarios when you may need to provide the loading service at the root or in a feature module, for\nexample when using a global state manager like NGRX. You can do it calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactiveLoadingModule.forRoot"),"\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactiveLoadingModule.forChild")," methods."),(0,a.kt)("h3",{id:"registering-root-loading-service"},"Registering root loading service"),(0,a.kt)("p",null,"To register a loading service at the root of your application, you must add the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactiveLoadingModule.forRoot()")," method\nwith the array of the properties that will be tracked."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=app.module.ts",title:"app.module.ts"},"import { ReactiveLoadingModule } from 'ngx-reactive-loading';\n\ntype RootLoadingActions = 'globalReload';\n\n@NgModule({\n  imports: [\n    ReactiveLoadingModule.forRoot<RootLoadingActions>(['globalReload']),\n  ],\n})\nexport class AppModule {}\n")),(0,a.kt)("h3",{id:"registering-feature-loading-service"},"Registering feature loading service"),(0,a.kt)("p",null,"For feature modules you must register your loading service by adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactiveLoadingModule.forChild()")," method in\nthe imports of your ",(0,a.kt)("inlineCode",{parentName:"p"},"NgModule")," with the service options."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=todo.module.ts",title:"todo.module.ts"},"import { ReactiveLoadingModule } from 'ngx-reactive-loading';\n\ntype TodoLoadingActions = 'addTodo' | 'removeTodo' | 'reloadTodo';\n\n@NgModule({\n  imports: [\n    ReactiveLoadingModule.forFeature(['addTodo', 'removeTodo', 'reloadTodo'], {\n      standalone: false,\n    }),\n  ],\n})\nexport class TodoModule {}\n")),(0,a.kt)("h3",{id:"custom-module-configuration"},"Custom module configuration"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactiveLoadingModule")," allows you to provide extra configuration params in addition to loading store options."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface LoadingStoreModuleOptions extends LoadingStoreOptions {\n  /**\n   * When true, log all loading state changes to the console.\n   * Use for debugging.\n   */\n  logger?: boolean;\n  /**\n   * The name of the provider. Useful for named logs.\n   */\n  name?: string;\n}\n")),(0,a.kt)("h4",{id:"event-logger"},"Event logger"),(0,a.kt)("p",null,"With the event logger, there will be a default eventListener to the loading store that will log all loading property\nchanges automatically in the console. Providing the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," option, the log will include also that will name it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=feature.module.ts",title:"feature.module.ts"},"// feature.module.ts\n@NgModule({\n  imports: [\n    ReactiveLoadingModule.forFeature(['addTodo', 'removeTodo', 'reloadTodo'], {\n      standalone: false,\n      name: 'FeatureModule1',\n      logger: true,\n    }),\n  ],\n})\nexport class FeatureModule {}\n")))}c.isMDXComponent=!0}}]);