"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[836],{9635:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],l={sidebar_position:3},s="untilLoading()",d={unversionedId:"operators/until-loading",id:"operators/until-loading",isDocsHomePage:!1,title:"untilLoading()",description:"Listen to all triggers, then wait for result and end loading upon emit.",source:"@site/docs/operators/until-loading.md",sourceDirName:"operators",slug:"/operators/until-loading",permalink:"/ngx-reactive-loading/docs/operators/until-loading",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/operators/until-loading.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"withLoading()",permalink:"/ngx-reactive-loading/docs/operators/with-loading"}},u=[{value:"Example",id:"example",children:[]}],c={toc:u};function p(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"untilloading"},"untilLoading()"),(0,o.kt)("p",null,"Listen to all triggers, then wait for result and end loading upon emit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {Observable} from 'rxjs';\n\nconst untilLoading: (\n  trigger$: readonly Observable<unknown>[],\n  content$: readonly Observable<unknown>[]\n): Observable<boolean>;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"trigger$ - Array of observables that will be listened. When a new value is emitted, the\nreturned observable will emit a ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," value;"),(0,o.kt)("li",{parentName:"ul"},"content$ - Array of observables that will be listened. When a new value is emitted, the\nreturned observable will emit a ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," value;")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { untilLoading } from 'ngx-reactive-loading';\nimport { BehaviorSubject, switchMap, catchError, of, share } from 'rxjs';\n\nconst reload$ = new BehaviorSubject<null>(null);\n\nconst items$ = this.reload$.pipe(\n  switchMap(() =>\n    this.service.getList().pipe(\n      catchError(() => of(null)),\n      share()\n    )\n  )\n);\n\nconst isLoading$ = untilLoading([reload$], [items$]);\n")))}p.isMDXComponent=!0}}]);