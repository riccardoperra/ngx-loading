"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64],{5744:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return g}});var i=t(3117),o=t(102),r=(t(7294),t(3905)),a=["components"],d={sidebar_position:2,title:"Dependency Injection"},s="Using with dependency injection",c={unversionedId:"loading-registry/dependency-injection",id:"loading-registry/dependency-injection",isDocsHomePage:!1,title:"Dependency Injection",description:"If you need to handle dynamic loading states, the loading registry could be the best choice. Unlike the loading service,",source:"@site/docs/loading-registry/dependency-injection.md",sourceDirName:"loading-registry",slug:"/loading-registry/dependency-injection",permalink:"/ngx-reactive-loading/docs/loading-registry/dependency-injection",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/loading-registry/dependency-injection.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Dependency Injection"},sidebar:"tutorialSidebar",previous:{title:"Basic usage",permalink:"/ngx-reactive-loading/docs/loading-registry/basic-usage"},next:{title:"HTTP Interceptors",permalink:"/ngx-reactive-loading/docs/loading-registry/http-interceptor"}},l=[],p={toc:l};function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-with-dependency-injection"},"Using with dependency injection"),(0,r.kt)("p",null,"If you need to handle dynamic loading states, the loading registry could be the best choice. Unlike the loading service,\nthe loading registry currently should be provided only one time in the same node injector. Providing a new token in the\nsame injector will override all the properties."),(0,r.kt)("p",null,"First, provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"LOADING_REGISTRY")," token passing the factory function in the module or component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.module.ts",title:"example.module.ts"},"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { createLoadingRegistry, LOADING_REGISTRY } from 'ngx-reactive-loading';\n\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [{ provide: LOADING_REGISTRY, useFactory: createLoadingRegistry }],\n})\nexport class ExampleModule {}\n")),(0,r.kt)("p",null,"Inside the component, you will have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"LOADING_REGISTRY")," provider."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=example.component.ts",title:"example.component.ts"},"import { Component, OnInit } from '@angular/core';\nimport { LoadingRegistry, LOADING_REGISTRY } from 'ngx-reactive-loading';\n\n@Component({ selector: 'app-example', template: `` })\nexport class ExampleComponent implements OnInit {\n  constructor(\n    @Inject(LOADING_REGISTRY)\n    readonly loadingRegistry: LoadingRegistry\n  ) {\n    this.loadingRegistry.addAll(['k1', 'k2']);\n  }\n\n  ngOnInit() {}\n}\n")))}g.isMDXComponent=!0}}]);