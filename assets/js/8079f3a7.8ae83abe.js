"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[664],{2154:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var i=t(3117),o=t(102),a=(t(7294),t(3905)),r=["components"],l={sidebar_position:1},s="getLoading",p={unversionedId:"pipes/get-loading",id:"pipes/get-loading",isDocsHomePage:!1,title:"getLoading",description:"Maps the given properties of the store to a boolean Observable which will emit a new value once the state of the",source:"@site/docs/pipes/get-loading.md",sourceDirName:"pipes",slug:"/pipes/get-loading",permalink:"/ngx-reactive-loading/docs/pipes/get-loading",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/pipes/get-loading.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"untilLoading()",permalink:"/ngx-reactive-loading/docs/operators/until-loading"}},d=[{value:"API",id:"api",children:[],level:2},{value:"Example with Loading registry",id:"example-with-loading-registry",children:[],level:2},{value:"Example with Loading store / Loading Service",id:"example-with-loading-store--loading-service",children:[],level:2}],g={toc:d};function c(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getloading"},"getLoading"),(0,a.kt)("p",null,"Maps the given properties of the store to a boolean Observable which will emit a new value once the state of the\nproperties change."),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Observable } from 'rxjs';\nimport { LoadingStore, LoadingStoreState } from 'ngx-reactive-loading';\nimport { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({ name: 'getLoading' })\nexport interface GetLoading implements PipeTransform {\n  transform<T extends PropertyKey>(\n    value: LoadingStore<T[]>,\n    properties: T[] | T\n  ): Observable<boolean>;\n\n  transform<T extends PropertyKey>(\n    value: LoadingRegistry<T>,\n    properties: T | T[]\n  ): Observable<boolean>;\n\n  transform<T extends PropertyKey>(\n    value: LoadingStore<T[]> | LoadingRegistry<T>,\n    properties: T | T[]\n  ): Observable<boolean>;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - The loading store or loading registry"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"properties")," - The properties of the given store or registry that will be listened")),(0,a.kt)("h2",{id:"example-with-loading-registry"},"Example with Loading registry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Component, OnInit } from '@angular/core';\nimport { LoadingRegistry } from 'ngx-reactive-loading';\n\n@Component({\n  selector: 'app-example',\n  template: `\n    <ng-container *ngIf=\"loadingRegistry | getLoading: 'key' | async\">\n      Key is loading...\n    </ng-container>\n  `,\n})\nexport class ExampleComponent implements OnInit {\n  constructor(readonly loadingRegistry: LoadingRegistry) {\n  }\n}\n")),(0,a.kt)("h2",{id:"example-with-loading-store--loading-service"},"Example with Loading store / Loading Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Component, OnInit } from '@angular/core';\nimport { LoadingService } from 'ngx-reactive-loading';\n\ntype Actions =\n  | 'add'\n  | 'remove';\n\n@Component({\n  selector: 'app-example',\n  template: `\n    <ng-container *ngIf=\"state | getLoading: 'add' | async\">\n      Add is loading...\n    </ng-container>\n  `,\n})\nexport class ExampleComponent implements OnInit {\n  readonly state = this.loadingService.state;\n\n  constructor(private readonly loadingService: LoadingService<Actions>) {\n  }\n}\n")))}c.isMDXComponent=!0}}]);