"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[84],{3829:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var n=a(3117),o=a(102),i=(a(7294),a(3905)),s=["components"],r={sidebar_position:1},d="Basic usage",l={unversionedId:"loading-store/basic-usage",id:"loading-store/basic-usage",isDocsHomePage:!1,title:"Basic usage",description:"The loading store is a key value object that allows handling multiple loading states defined",source:"@site/docs/loading-store/basic-usage.md",sourceDirName:"loading-store",slug:"/loading-store/basic-usage",permalink:"/ngx-reactive-loading/docs/loading-store/basic-usage",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/loading-store/basic-usage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/ngx-reactive-loading/docs/getting-started/installation"},next:{title:"Loading service",permalink:"/ngx-reactive-loading/docs/loading-store/loading-service"}},c=[{value:"Creates a loading store",id:"creates-a-loading-store",children:[],level:2},{value:"Reading the loading store state",id:"reading-the-loading-store-state",children:[],level:2},{value:"Update the loading store state",id:"update-the-loading-store-state",children:[],level:2}],g={toc:c};function p(e){var t=e.components,a=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-usage"},"Basic usage"),(0,i.kt)("p",null,"The loading store is a key value object that allows handling ",(0,i.kt)("strong",null,"multiple loading states defined\nstatically")," through your application."),(0,i.kt)("h2",{id:"creates-a-loading-store"},"Creates a loading store"),(0,i.kt)("p",null,"To create a loading store that handle the given loading states you have to invoke the ",(0,i.kt)("inlineCode",{parentName:"p"},"createLoadingStore")," function passing the\nproperties that will be added to the store to be observed and updated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="loading.state.ts"',title:'"loading.state.ts"'},"import { createLoadingStore } from 'ngx-reactive-loading';\n\nexport enum LoadingActions {\n  add = 'add',\n  reload = 'reload',\n}\n\nconst exampleLoadingStore = createLoadingStore([Actions.add, Actions.reload]);\n")),(0,i.kt)("h2",{id:"reading-the-loading-store-state"},"Reading the loading store state"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="loading.state.ts"',title:'"loading.state.ts"'},"import { delay, Observable, of } from 'rxjs';\n\nconst exampleLoadingStore = createLoadingStore(['add', 'reload']);\nconst source$ = of(0).pipe(delay(1000));\n\nconst isAdding$: Observable<boolean> = exampleLoadingStore.add.$;\nconst isReloading$: Observable<boolean> = exampleLoadingStore.reload.$;\n")),(0,i.kt)("h2",{id:"update-the-loading-store-state"},"Update the loading store state"),(0,i.kt)("p",null,"Like ",(0,i.kt)("inlineCode",{parentName:"p"},"withLoading")," operator helper, you can perform a side effect for every emission on the source Observable, updating\nthe state of the key when the source is subscribed and when terminates on complete using the ",(0,i.kt)("inlineCode",{parentName:"p"},"track()")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="loading.state.ts"',title:'"loading.state.ts"'},"import { of, delay } from 'rxjs';\n\nconst exampleLoadingStore = createLoadingStore(['add', 'reload']);\nconst source$ = of(0).pipe(delay(1000));\n\nconst sub = source$.pipe(exampleLoadingStore.add.track()).subscribe();\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"track()")," is like combining tap and finalize operators to a cold observable."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { tap, switchMap, Subject } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\n\nconst stream$ = new Subject<void>();\nconst httpCall$ = ajax('/');\n\nconst source$ = stream$.pipe(\n  tap(() => loading$.next(true)),\n  switchMap(() => httpCall$.pipe(finalize(() => loading$.next(false))))\n);\n")))))}p.isMDXComponent=!0}}]);