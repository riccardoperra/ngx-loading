"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[835],{8215:function(e,t,n){var o=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return d}});var o=n(3117),a=n(7294),r=n(2389),i=n(9443);var l=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(9521),u=n(6010),p="tabItem_1uMI";function c(e){var t,n,o,r=e.lazy,i=e.block,c=e.defaultValue,d=e.values,m=e.groupId,g=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),f=(0,s.lx)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(t=null!=c?c:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=l(),T=b.tabGroupChoices,k=b.setTabGroupChoices,x=(0,a.useState)(y),C=x[0],N=x[1],w=[],I=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var H=T[m];null!=H&&H!==C&&v.some((function(e){return e.value===H}))&&N(H)}var E=function(e){var t=e.currentTarget,n=w.indexOf(t),o=v[n].value;o!==C&&(I(t),N(o),null!=m&&k(m,o))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o=w.indexOf(e.currentTarget)+1;n=w[o]||w[0];break;case"ArrowLeft":var a=w.indexOf(e.currentTarget)-1;n=w[a]||w[w.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":i},g)},v.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,className:(0,u.Z)("tabs__item",p,{"tabs__item--active":C===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:L,onFocus:E,onClick:E},null!=n?n:t)}))),r?(0,a.cloneElement)(h.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function d(e){var t=(0,r.Z)();return a.createElement(c,(0,o.Z)({key:String(t)},e))}},724:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return g}});var o=n(3117),a=n(102),r=(n(7294),n(3905)),i=n(6396),l=n(8215),s=n(9055),u="import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [BrowserModule, HttpModule],\n  declarations: [AppComponent],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpLoadingRegistryInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",p=["components"],c={sidebar_position:3,title:"HTTP Interceptors"},d=void 0,m={unversionedId:"loading-registry/http-interceptor",id:"loading-registry/http-interceptor",isDocsHomePage:!1,title:"HTTP Interceptors",description:"If you need to track the loading state for every http request status, you can use the",source:"@site/docs/loading-registry/http-interceptor.mdx",sourceDirName:"loading-registry",slug:"/loading-registry/http-interceptor",permalink:"/ngx-reactive-loading/docs/loading-registry/http-interceptor",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/loading-registry/http-interceptor.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"HTTP Interceptors"},sidebar:"tutorialSidebar",previous:{title:"Dependency Injection",permalink:"/ngx-reactive-loading/docs/loading-registry/dependency-injection"},next:{title:"someLoading()",permalink:"/ngx-reactive-loading/docs/operators/some-loading"}},g=[{value:"Example",id:"example",children:[],level:2},{value:"Utils",id:"utils",children:[{value:"<code>withHttpLoadingContext()</code>",id:"withhttploadingcontext",children:[],level:3}],level:2}],h={toc:g};function v(e){var t=e.components,n=(0,a.Z)(e,p);return(0,r.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you need to track the loading state for every http request status, you can use the\nbuilt-in ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpLoadingRegistryInterceptor"),"."),(0,r.kt)("p",null,"Providing the interceptor will automatically provide the loading registry which will take care of your http calls. The\nhttp loading registry will be available through the ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP_LOADING_REGISTRY")," token."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(s.Z,{className:"language-ts",title:"app.module.ts",mdxType:"CodeBlock"},u.trim()),(0,r.kt)("p",null,"To make the interceptor work you must pass a context to each http call that should be tracked by the interceptor."),(0,r.kt)("p",null,"The interceptor will dynamically create and remove the keys of the registry, allowing you to listen to all\nstate changes."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"app.component.ts",label:"src/app/app.component.ts",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  HTTP_LOADING_REGISTRY,\n  HTTP_LOADING_CONTEXT,\n  LoadingRegistry,\n  withHttpLoadingContext,\n} from 'ngx-reactive-loading';\nimport { HttpClient, HttpContext } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  template: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  readonly someLoading$ = this.loadingRegistry.someLoading([\n    'actionName',\n    'actionName2',\n  ]);\n  readonly isActionNameLoading$ = this.loadingRegistry.isLoading('actionName');\n\n  constructor(\n    @Inject(HTTP_LOADING_REGISTRY)\n    private readonly loadingRegistry: LoadingRegistry,\n    private readonly http: HttpClient\n  ) {}\n\n  ngOnInit() {\n    this.http\n      .get('/', { context: withHttpLoadingContext('actionName2') })\n      .subscribe();\n\n    // Passing context manually\n    this.http\n      .get('/', {\n        context: new HttpContext().set(HTTP_LOADING_CONTEXT, 'actionName'),\n      })\n      .subscribe();\n  }\n}\n".trim())),(0,r.kt)(l.Z,{value:"app.component.html",label:"src/app/app.component.html",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-html",mdxType:"CodeBlock"},'<ng-container *ngIf="someLoading$ | async"> Some loading... </ng-container>\n<ng-container *ngIf="isActionNameLoading$ | async">\n  Action name loading...\n</ng-container>\n'.trim())),(0,r.kt)(l.Z,{value:"app.module.ts",label:"src/app/app.module.ts",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},u.trim()))),(0,r.kt)("h2",{id:"utils"},"Utils"),(0,r.kt)("h3",{id:"withhttploadingcontext"},(0,r.kt)("inlineCode",{parentName:"h3"},"withHttpLoadingContext()")),(0,r.kt)("p",null,"Passing http context manually could be onerous, so using ",(0,r.kt)("inlineCode",{parentName:"p"},"withHttpLoadingContext")," helper\ncould be the best choice."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { withHttpLoadingContext } from 'ngx-reactive-loading';\nimport { HttpContext } from '@angular/common/http';\n\nconst context: HttpContext = withHttpLoadingContext('api');\n")))}v.isMDXComponent=!0}}]);