"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[167],{1013:function(e,o,n){n.r(o),n.d(o,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return g},default:function(){return p}});var t=n(7462),a=n(3366),i=(n(7294),n(3905)),r=["components"],s={sidebar_position:1},d="someLoading()",l={unversionedId:"operators/some-loading",id:"operators/some-loading",isDocsHomePage:!1,title:"someLoading()",description:"Listen to the state changes of the given properties and return true if it finds a state which is currently loading.",source:"@site/docs/operators/some-loading.md",sourceDirName:"operators",slug:"/operators/some-loading",permalink:"/ngx-reactive-loading/docs/operators/some-loading",editUrl:"https://github.com/riccardoperra/ngx-reactive-loading/edit/main/docs/docs/docs/operators/some-loading.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Helpers",permalink:"/ngx-reactive-loading/docs/additional-functionality/utils"},next:{title:"withLoading()",permalink:"/ngx-reactive-loading/docs/operators/with-loading"}},g=[{value:"Example",id:"example",children:[{value:"Listen to loading store or properties changes",id:"listen-to-loading-store-or-properties-changes",children:[]},{value:"Listen to observable changes",id:"listen-to-observable-changes",children:[]}]}],c={toc:g};function p(e){var o=e.components,n=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},c,n,{components:o,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"someloading"},"someLoading()"),(0,i.kt)("p",null,"Listen to the state changes of the given properties and return true if it finds a state which is currently loading."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {Observable} from 'rxjs';\nimport {LoadingStore, LoadingStoreState} from 'ngx-reactive-loading';\n\nconst someLoading: <\n  Loaders extends readonly [\n    ...(readonly (\n      | LoadingStore<readonly PropertyKey[]>\n      | LoadingStoreState\n      | Observable<boolean>\n    )[])\n  ]\n>(loaders: Loaders): Observable<boolean>;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loaders")," - The array of observables, loading store or states that will be listened.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("h3",{id:"listen-to-loading-store-or-properties-changes"},"Listen to loading store or properties changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLoadingStore, someLoading } from 'ngx-reactive-loading';\n\n// Creates the loading store\nconst loadingStore = createLoadingStore(['add', 'remove', 'clear']);\n\n// Observes loading store state\nconst isSomeLoading$ = someLoading([loadingStore]);\n\n// Observe loading properties state\nconst isAddingOrClearing$ = someLoading([loadingStore.add, loadingStore.clear]);\n")),(0,i.kt)("h3",{id:"listen-to-observable-changes"},"Listen to observable changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLoadingStore, someLoading } from 'ngx-reactive-loading';\nimport { Subject } from 'rxjs';\n\n// Creates the loading subjects\nconst loadingAdd$ = new Subject<boolean>();\nconst loading$ = new Subject<boolean>();\n\n// Observes the observables states\nconst isLoading = someLoading([loadingAdd$, loading$]);\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"someLoading signature overloading")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can pass both properties and loading store states as ",(0,i.kt)("inlineCode",{parentName:"p"},"someLoading")," parameters!"))))}p.isMDXComponent=!0}}]);