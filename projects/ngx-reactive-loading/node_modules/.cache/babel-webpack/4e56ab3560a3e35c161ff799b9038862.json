{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/directive_normalizer\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/config\", \"@angular/compiler/src/core\", \"@angular/compiler/src/ml_parser/ast\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/style_url_resolver\", \"@angular/compiler/src/template_parser/template_preparser\", \"@angular/compiler/src/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DirectiveNormalizer = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var compile_metadata_1 = require(\"@angular/compiler/src/compile_metadata\");\n\n  var config_1 = require(\"@angular/compiler/src/config\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var html = require(\"@angular/compiler/src/ml_parser/ast\");\n\n  var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n\n  var style_url_resolver_1 = require(\"@angular/compiler/src/style_url_resolver\");\n\n  var template_preparser_1 = require(\"@angular/compiler/src/template_parser/template_preparser\");\n\n  var util_1 = require(\"@angular/compiler/src/util\");\n\n  var DirectiveNormalizer = function () {\n    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n      this._resourceLoader = _resourceLoader;\n      this._urlResolver = _urlResolver;\n      this._htmlParser = _htmlParser;\n      this._config = _config;\n      this._resourceLoaderCache = new Map();\n    }\n\n    DirectiveNormalizer.prototype.clearCache = function () {\n      this._resourceLoaderCache.clear();\n    };\n\n    DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {\n      var _this = this;\n\n      if (!normalizedDirective.isComponent) {\n        return;\n      }\n\n      var template = normalizedDirective.template;\n\n      this._resourceLoaderCache.delete(template.templateUrl);\n\n      template.externalStylesheets.forEach(function (stylesheet) {\n        _this._resourceLoaderCache.delete(stylesheet.moduleUrl);\n      });\n    };\n\n    DirectiveNormalizer.prototype._fetch = function (url) {\n      var result = this._resourceLoaderCache.get(url);\n\n      if (!result) {\n        result = this._resourceLoader.get(url);\n\n        this._resourceLoaderCache.set(url, result);\n      }\n\n      return result;\n    };\n\n    DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {\n      var _this = this;\n\n      if (util_1.isDefined(prenormData.template)) {\n        if (util_1.isDefined(prenormData.templateUrl)) {\n          throw util_1.syntaxError(\"'\" + util_1.stringify(prenormData.componentType) + \"' component cannot define both template and templateUrl\");\n        }\n\n        if (typeof prenormData.template !== 'string') {\n          throw util_1.syntaxError(\"The template specified for component \" + util_1.stringify(prenormData.componentType) + \" is not a string\");\n        }\n      } else if (util_1.isDefined(prenormData.templateUrl)) {\n        if (typeof prenormData.templateUrl !== 'string') {\n          throw util_1.syntaxError(\"The templateUrl specified for component \" + util_1.stringify(prenormData.componentType) + \" is not a string\");\n        }\n      } else {\n        throw util_1.syntaxError(\"No template specified for component \" + util_1.stringify(prenormData.componentType));\n      }\n\n      if (util_1.isDefined(prenormData.preserveWhitespaces) && typeof prenormData.preserveWhitespaces !== 'boolean') {\n        throw util_1.syntaxError(\"The preserveWhitespaces option for component \" + util_1.stringify(prenormData.componentType) + \" must be a boolean\");\n      }\n\n      return util_1.SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) {\n        return _this._normalizeTemplateMetadata(prenormData, preparsedTemplate);\n      });\n    };\n\n    DirectiveNormalizer.prototype._preParseTemplate = function (prenomData) {\n      var _this = this;\n\n      var template;\n      var templateUrl;\n\n      if (prenomData.template != null) {\n        template = prenomData.template;\n        templateUrl = prenomData.moduleUrl;\n      } else {\n        templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);\n        template = this._fetch(templateUrl);\n      }\n\n      return util_1.SyncAsync.then(template, function (template) {\n        return _this._preparseLoadedTemplate(prenomData, template, templateUrl);\n      });\n    };\n\n    DirectiveNormalizer.prototype._preparseLoadedTemplate = function (prenormData, template, templateAbsUrl) {\n      var isInline = !!prenormData.template;\n      var interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(prenormData.interpolation);\n      var templateUrl = compile_metadata_1.templateSourceUrl({\n        reference: prenormData.ngModuleType\n      }, {\n        type: {\n          reference: prenormData.componentType\n        }\n      }, {\n        isInline: isInline,\n        templateUrl: templateAbsUrl\n      });\n\n      var rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, {\n        tokenizeExpansionForms: true,\n        interpolationConfig: interpolationConfig\n      });\n\n      if (rootNodesAndErrors.errors.length > 0) {\n        var errorString = rootNodesAndErrors.errors.join('\\n');\n        throw util_1.syntaxError(\"Template parse errors:\\n\" + errorString);\n      }\n\n      var templateMetadataStyles = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n        styles: prenormData.styles,\n        moduleUrl: prenormData.moduleUrl\n      }));\n\n      var visitor = new TemplatePreparseVisitor();\n      html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n\n      var templateStyles = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n        styles: visitor.styles,\n        styleUrls: visitor.styleUrls,\n        moduleUrl: templateAbsUrl\n      }));\n\n      var styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n      var inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n\n      var styleUrls = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n        styleUrls: prenormData.styleUrls,\n        moduleUrl: prenormData.moduleUrl\n      })).styleUrls;\n\n      return {\n        template: template,\n        templateUrl: templateAbsUrl,\n        isInline: isInline,\n        htmlAst: rootNodesAndErrors,\n        styles: styles,\n        inlineStyleUrls: inlineStyleUrls,\n        styleUrls: styleUrls,\n        ngContentSelectors: visitor.ngContentSelectors\n      };\n    };\n\n    DirectiveNormalizer.prototype._normalizeTemplateMetadata = function (prenormData, preparsedTemplate) {\n      var _this = this;\n\n      return util_1.SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) {\n        return _this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets);\n      });\n    };\n\n    DirectiveNormalizer.prototype._normalizeLoadedTemplateMetadata = function (prenormData, preparsedTemplate, stylesheets) {\n      // Algorithm:\n      // - produce exactly 1 entry per original styleUrl in\n      // CompileTemplateMetadata.externalStylesheets with all styles inlined\n      // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n      // Reason: be able to determine how many stylesheets there are even without loading\n      // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n      // (as resource loading may be async)\n      var _this = this;\n\n      var styles = tslib_1.__spreadArray([], tslib_1.__read(preparsedTemplate.styles));\n\n      this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n\n      var styleUrls = preparsedTemplate.styleUrls;\n      var externalStylesheets = styleUrls.map(function (styleUrl) {\n        var stylesheet = stylesheets.get(styleUrl);\n\n        var styles = tslib_1.__spreadArray([], tslib_1.__read(stylesheet.styles));\n\n        _this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n\n        return new compile_metadata_1.CompileStylesheetMetadata({\n          moduleUrl: styleUrl,\n          styles: styles\n        });\n      });\n      var encapsulation = prenormData.encapsulation;\n\n      if (encapsulation == null) {\n        encapsulation = this._config.defaultEncapsulation;\n      }\n\n      if (encapsulation === core_1.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {\n        encapsulation = core_1.ViewEncapsulation.None;\n      }\n\n      return new compile_metadata_1.CompileTemplateMetadata({\n        encapsulation: encapsulation,\n        template: preparsedTemplate.template,\n        templateUrl: preparsedTemplate.templateUrl,\n        htmlAst: preparsedTemplate.htmlAst,\n        styles: styles,\n        styleUrls: styleUrls,\n        ngContentSelectors: preparsedTemplate.ngContentSelectors,\n        animations: prenormData.animations,\n        interpolation: prenormData.interpolation,\n        isInline: preparsedTemplate.isInline,\n        externalStylesheets: externalStylesheets,\n        preserveWhitespaces: config_1.preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces)\n      });\n    };\n\n    DirectiveNormalizer.prototype._inlineStyles = function (styleUrls, stylesheets, targetStyles) {\n      var _this = this;\n\n      styleUrls.forEach(function (styleUrl) {\n        var stylesheet = stylesheets.get(styleUrl);\n        stylesheet.styles.forEach(function (style) {\n          return targetStyles.push(style);\n        });\n\n        _this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n      });\n    };\n\n    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {\n      var _this = this;\n\n      if (loadedStylesheets === void 0) {\n        loadedStylesheets = new Map();\n      }\n\n      return util_1.SyncAsync.then(util_1.SyncAsync.all(styleUrls.filter(function (styleUrl) {\n        return !loadedStylesheets.has(styleUrl);\n      }).map(function (styleUrl) {\n        return util_1.SyncAsync.then(_this._fetch(styleUrl), function (loadedStyle) {\n          var stylesheet = _this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n            styles: [loadedStyle],\n            moduleUrl: styleUrl\n          }));\n\n          loadedStylesheets.set(styleUrl, stylesheet);\n          return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n        });\n      })), function (_) {\n        return loadedStylesheets;\n      });\n    };\n\n    DirectiveNormalizer.prototype._normalizeStylesheet = function (stylesheet) {\n      var _this = this;\n\n      var moduleUrl = stylesheet.moduleUrl;\n      var allStyleUrls = stylesheet.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function (url) {\n        return _this._urlResolver.resolve(moduleUrl, url);\n      });\n      var allStyles = stylesheet.styles.map(function (style) {\n        var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, moduleUrl, style);\n        allStyleUrls.push.apply(allStyleUrls, tslib_1.__spreadArray([], tslib_1.__read(styleWithImports.styleUrls)));\n        return styleWithImports.style;\n      });\n      return new compile_metadata_1.CompileStylesheetMetadata({\n        styles: allStyles,\n        styleUrls: allStyleUrls,\n        moduleUrl: moduleUrl\n      });\n    };\n\n    return DirectiveNormalizer;\n  }();\n\n  exports.DirectiveNormalizer = DirectiveNormalizer;\n\n  var TemplatePreparseVisitor = function () {\n    function TemplatePreparseVisitor() {\n      this.ngContentSelectors = [];\n      this.styles = [];\n      this.styleUrls = [];\n      this.ngNonBindableStackCount = 0;\n    }\n\n    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {\n      var preparsedElement = template_preparser_1.preparseElement(ast);\n\n      switch (preparsedElement.type) {\n        case template_preparser_1.PreparsedElementType.NG_CONTENT:\n          if (this.ngNonBindableStackCount === 0) {\n            this.ngContentSelectors.push(preparsedElement.selectAttr);\n          }\n\n          break;\n\n        case template_preparser_1.PreparsedElementType.STYLE:\n          var textContent_1 = '';\n          ast.children.forEach(function (child) {\n            if (child instanceof html.Text) {\n              textContent_1 += child.value;\n            }\n          });\n          this.styles.push(textContent_1);\n          break;\n\n        case template_preparser_1.PreparsedElementType.STYLESHEET:\n          this.styleUrls.push(preparsedElement.hrefAttr);\n          break;\n\n        default:\n          break;\n      }\n\n      if (preparsedElement.nonBindable) {\n        this.ngNonBindableStackCount++;\n      }\n\n      html.visitAll(this, ast.children);\n\n      if (preparsedElement.nonBindable) {\n        this.ngNonBindableStackCount--;\n      }\n\n      return null;\n    };\n\n    TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {\n      html.visitAll(this, ast.cases);\n    };\n\n    TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {\n      html.visitAll(this, ast.expression);\n    };\n\n    TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {\n      return null;\n    };\n\n    TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {\n      return null;\n    };\n\n    TemplatePreparseVisitor.prototype.visitText = function (ast, context) {\n      return null;\n    };\n\n    return TemplatePreparseVisitor;\n  }();\n}); //# sourceMappingURL=data:application/json;base64,","map":{"version":3,"sources":["c:/Users/perra/Documents/projects/ngx-reactive-loading/node_modules/@angular/compiler/src/directive_normalizer.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","DirectiveNormalizer","tslib_1","compile_metadata_1","config_1","core_1","html","interpolation_config_1","style_url_resolver_1","template_preparser_1","util_1","_resourceLoader","_urlResolver","_htmlParser","_config","_resourceLoaderCache","Map","prototype","clearCache","clear","clearCacheFor","normalizedDirective","_this","isComponent","template","delete","templateUrl","externalStylesheets","forEach","stylesheet","moduleUrl","_fetch","url","result","get","set","normalizeTemplate","prenormData","isDefined","syntaxError","stringify","componentType","preserveWhitespaces","SyncAsync","then","_preParseTemplate","preparsedTemplate","_normalizeTemplateMetadata","prenomData","resolve","_preparseLoadedTemplate","templateAbsUrl","isInline","interpolationConfig","InterpolationConfig","fromArray","interpolation","templateSourceUrl","reference","ngModuleType","type","rootNodesAndErrors","parse","tokenizeExpansionForms","errors","length","errorString","join","templateMetadataStyles","_normalizeStylesheet","CompileStylesheetMetadata","styles","visitor","TemplatePreparseVisitor","visitAll","rootNodes","templateStyles","styleUrls","concat","inlineStyleUrls","htmlAst","ngContentSelectors","_loadMissingExternalStylesheets","_normalizeLoadedTemplateMetadata","stylesheets","__spreadArray","__read","_inlineStyles","map","styleUrl","encapsulation","defaultEncapsulation","ViewEncapsulation","Emulated","None","CompileTemplateMetadata","animations","preserveWhitespacesDefault","targetStyles","style","push","loadedStylesheets","all","filter","has","loadedStyle","_","allStyleUrls","isStyleUrlResolvable","allStyles","styleWithImports","extractStyleUrls","apply","ngNonBindableStackCount","visitElement","ast","context","preparsedElement","preparseElement","PreparsedElementType","NG_CONTENT","selectAttr","STYLE","textContent_1","children","child","Text","STYLESHEET","hrefAttr","nonBindable","visitExpansion","cases","visitExpansionCase","expression","visitComment","visitAttribute","visitText"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define(\"@angular/compiler/src/directive_normalizer\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/config\", \"@angular/compiler/src/core\", \"@angular/compiler/src/ml_parser/ast\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/style_url_resolver\", \"@angular/compiler/src/template_parser/template_preparser\", \"@angular/compiler/src/util\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DirectiveNormalizer = void 0;\n    var tslib_1 = require(\"tslib\");\n    var compile_metadata_1 = require(\"@angular/compiler/src/compile_metadata\");\n    var config_1 = require(\"@angular/compiler/src/config\");\n    var core_1 = require(\"@angular/compiler/src/core\");\n    var html = require(\"@angular/compiler/src/ml_parser/ast\");\n    var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n    var style_url_resolver_1 = require(\"@angular/compiler/src/style_url_resolver\");\n    var template_preparser_1 = require(\"@angular/compiler/src/template_parser/template_preparser\");\n    var util_1 = require(\"@angular/compiler/src/util\");\n    var DirectiveNormalizer = /** @class */ (function () {\n        function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n            this._resourceLoader = _resourceLoader;\n            this._urlResolver = _urlResolver;\n            this._htmlParser = _htmlParser;\n            this._config = _config;\n            this._resourceLoaderCache = new Map();\n        }\n        DirectiveNormalizer.prototype.clearCache = function () {\n            this._resourceLoaderCache.clear();\n        };\n        DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {\n            var _this = this;\n            if (!normalizedDirective.isComponent) {\n                return;\n            }\n            var template = normalizedDirective.template;\n            this._resourceLoaderCache.delete(template.templateUrl);\n            template.externalStylesheets.forEach(function (stylesheet) {\n                _this._resourceLoaderCache.delete(stylesheet.moduleUrl);\n            });\n        };\n        DirectiveNormalizer.prototype._fetch = function (url) {\n            var result = this._resourceLoaderCache.get(url);\n            if (!result) {\n                result = this._resourceLoader.get(url);\n                this._resourceLoaderCache.set(url, result);\n            }\n            return result;\n        };\n        DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {\n            var _this = this;\n            if (util_1.isDefined(prenormData.template)) {\n                if (util_1.isDefined(prenormData.templateUrl)) {\n                    throw util_1.syntaxError(\"'\" + util_1.stringify(prenormData\n                        .componentType) + \"' component cannot define both template and templateUrl\");\n                }\n                if (typeof prenormData.template !== 'string') {\n                    throw util_1.syntaxError(\"The template specified for component \" + util_1.stringify(prenormData.componentType) + \" is not a string\");\n                }\n            }\n            else if (util_1.isDefined(prenormData.templateUrl)) {\n                if (typeof prenormData.templateUrl !== 'string') {\n                    throw util_1.syntaxError(\"The templateUrl specified for component \" + util_1.stringify(prenormData.componentType) + \" is not a string\");\n                }\n            }\n            else {\n                throw util_1.syntaxError(\"No template specified for component \" + util_1.stringify(prenormData.componentType));\n            }\n            if (util_1.isDefined(prenormData.preserveWhitespaces) &&\n                typeof prenormData.preserveWhitespaces !== 'boolean') {\n                throw util_1.syntaxError(\"The preserveWhitespaces option for component \" + util_1.stringify(prenormData.componentType) + \" must be a boolean\");\n            }\n            return util_1.SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) { return _this._normalizeTemplateMetadata(prenormData, preparsedTemplate); });\n        };\n        DirectiveNormalizer.prototype._preParseTemplate = function (prenomData) {\n            var _this = this;\n            var template;\n            var templateUrl;\n            if (prenomData.template != null) {\n                template = prenomData.template;\n                templateUrl = prenomData.moduleUrl;\n            }\n            else {\n                templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);\n                template = this._fetch(templateUrl);\n            }\n            return util_1.SyncAsync.then(template, function (template) { return _this._preparseLoadedTemplate(prenomData, template, templateUrl); });\n        };\n        DirectiveNormalizer.prototype._preparseLoadedTemplate = function (prenormData, template, templateAbsUrl) {\n            var isInline = !!prenormData.template;\n            var interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(prenormData.interpolation);\n            var templateUrl = compile_metadata_1.templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl });\n            var rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, { tokenizeExpansionForms: true, interpolationConfig: interpolationConfig });\n            if (rootNodesAndErrors.errors.length > 0) {\n                var errorString = rootNodesAndErrors.errors.join('\\n');\n                throw util_1.syntaxError(\"Template parse errors:\\n\" + errorString);\n            }\n            var templateMetadataStyles = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({ styles: prenormData.styles, moduleUrl: prenormData.moduleUrl }));\n            var visitor = new TemplatePreparseVisitor();\n            html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n            var templateStyles = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\n            var styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n            var inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n            var styleUrls = this\n                ._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({ styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl }))\n                .styleUrls;\n            return {\n                template: template,\n                templateUrl: templateAbsUrl,\n                isInline: isInline,\n                htmlAst: rootNodesAndErrors,\n                styles: styles,\n                inlineStyleUrls: inlineStyleUrls,\n                styleUrls: styleUrls,\n                ngContentSelectors: visitor.ngContentSelectors,\n            };\n        };\n        DirectiveNormalizer.prototype._normalizeTemplateMetadata = function (prenormData, preparsedTemplate) {\n            var _this = this;\n            return util_1.SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) { return _this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets); });\n        };\n        DirectiveNormalizer.prototype._normalizeLoadedTemplateMetadata = function (prenormData, preparsedTemplate, stylesheets) {\n            // Algorithm:\n            // - produce exactly 1 entry per original styleUrl in\n            // CompileTemplateMetadata.externalStylesheets with all styles inlined\n            // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n            // Reason: be able to determine how many stylesheets there are even without loading\n            // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n            // (as resource loading may be async)\n            var _this = this;\n            var styles = tslib_1.__spreadArray([], tslib_1.__read(preparsedTemplate.styles));\n            this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n            var styleUrls = preparsedTemplate.styleUrls;\n            var externalStylesheets = styleUrls.map(function (styleUrl) {\n                var stylesheet = stylesheets.get(styleUrl);\n                var styles = tslib_1.__spreadArray([], tslib_1.__read(stylesheet.styles));\n                _this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n                return new compile_metadata_1.CompileStylesheetMetadata({ moduleUrl: styleUrl, styles: styles });\n            });\n            var encapsulation = prenormData.encapsulation;\n            if (encapsulation == null) {\n                encapsulation = this._config.defaultEncapsulation;\n            }\n            if (encapsulation === core_1.ViewEncapsulation.Emulated && styles.length === 0 &&\n                styleUrls.length === 0) {\n                encapsulation = core_1.ViewEncapsulation.None;\n            }\n            return new compile_metadata_1.CompileTemplateMetadata({\n                encapsulation: encapsulation,\n                template: preparsedTemplate.template,\n                templateUrl: preparsedTemplate.templateUrl,\n                htmlAst: preparsedTemplate.htmlAst,\n                styles: styles,\n                styleUrls: styleUrls,\n                ngContentSelectors: preparsedTemplate.ngContentSelectors,\n                animations: prenormData.animations,\n                interpolation: prenormData.interpolation,\n                isInline: preparsedTemplate.isInline,\n                externalStylesheets: externalStylesheets,\n                preserveWhitespaces: config_1.preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n            });\n        };\n        DirectiveNormalizer.prototype._inlineStyles = function (styleUrls, stylesheets, targetStyles) {\n            var _this = this;\n            styleUrls.forEach(function (styleUrl) {\n                var stylesheet = stylesheets.get(styleUrl);\n                stylesheet.styles.forEach(function (style) { return targetStyles.push(style); });\n                _this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n            });\n        };\n        DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {\n            var _this = this;\n            if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }\n            return util_1.SyncAsync.then(util_1.SyncAsync.all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })\n                .map(function (styleUrl) { return util_1.SyncAsync.then(_this._fetch(styleUrl), function (loadedStyle) {\n                var stylesheet = _this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\n                loadedStylesheets.set(styleUrl, stylesheet);\n                return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n            }); })), function (_) { return loadedStylesheets; });\n        };\n        DirectiveNormalizer.prototype._normalizeStylesheet = function (stylesheet) {\n            var _this = this;\n            var moduleUrl = stylesheet.moduleUrl;\n            var allStyleUrls = stylesheet.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)\n                .map(function (url) { return _this._urlResolver.resolve(moduleUrl, url); });\n            var allStyles = stylesheet.styles.map(function (style) {\n                var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, moduleUrl, style);\n                allStyleUrls.push.apply(allStyleUrls, tslib_1.__spreadArray([], tslib_1.__read(styleWithImports.styleUrls)));\n                return styleWithImports.style;\n            });\n            return new compile_metadata_1.CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });\n        };\n        return DirectiveNormalizer;\n    }());\n    exports.DirectiveNormalizer = DirectiveNormalizer;\n    var TemplatePreparseVisitor = /** @class */ (function () {\n        function TemplatePreparseVisitor() {\n            this.ngContentSelectors = [];\n            this.styles = [];\n            this.styleUrls = [];\n            this.ngNonBindableStackCount = 0;\n        }\n        TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {\n            var preparsedElement = template_preparser_1.preparseElement(ast);\n            switch (preparsedElement.type) {\n                case template_preparser_1.PreparsedElementType.NG_CONTENT:\n                    if (this.ngNonBindableStackCount === 0) {\n                        this.ngContentSelectors.push(preparsedElement.selectAttr);\n                    }\n                    break;\n                case template_preparser_1.PreparsedElementType.STYLE:\n                    var textContent_1 = '';\n                    ast.children.forEach(function (child) {\n                        if (child instanceof html.Text) {\n                            textContent_1 += child.value;\n                        }\n                    });\n                    this.styles.push(textContent_1);\n                    break;\n                case template_preparser_1.PreparsedElementType.STYLESHEET:\n                    this.styleUrls.push(preparsedElement.hrefAttr);\n                    break;\n                default:\n                    break;\n            }\n            if (preparsedElement.nonBindable) {\n                this.ngNonBindableStackCount++;\n            }\n            html.visitAll(this, ast.children);\n            if (preparsedElement.nonBindable) {\n                this.ngNonBindableStackCount--;\n            }\n            return null;\n        };\n        TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {\n            html.visitAll(this, ast.cases);\n        };\n        TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {\n            html.visitAll(this, ast.expression);\n        };\n        TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {\n            return null;\n        };\n        TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {\n            return null;\n        };\n        TemplatePreparseVisitor.prototype.visitText = function (ast, context) {\n            return null;\n        };\n        return TemplatePreparseVisitor;\n    }());\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlX25vcm1hbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21waWxlci9zcmMvZGlyZWN0aXZlX25vcm1hbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7OztJQUVILDJFQUFtSTtJQUNuSSx1REFBb0U7SUFDcEUsbURBQXlDO0lBQ3pDLDBEQUF3QztJQUV4Qyw2RkFBcUU7SUFHckUsK0VBQTRFO0lBQzVFLCtGQUEyRjtJQUUzRixtREFBb0U7SUFnQnBFO1FBR0UsNkJBQ1ksZUFBK0IsRUFBVSxZQUF5QixFQUNsRSxXQUF1QixFQUFVLE9BQXVCO1lBRHhELG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtZQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFhO1lBQ2xFLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1lBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7WUFKNUQseUJBQW9CLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7UUFJRyxDQUFDO1FBRXhFLHdDQUFVLEdBQVY7WUFDRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEMsQ0FBQztRQUVELDJDQUFhLEdBQWIsVUFBYyxtQkFBNkM7WUFBM0QsaUJBU0M7WUFSQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFO2dCQUNwQyxPQUFPO2FBQ1I7WUFDRCxJQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxRQUFVLENBQUM7WUFDaEQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBWSxDQUFDLENBQUM7WUFDeEQsUUFBUSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQVU7Z0JBQzlDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVUsQ0FBQyxDQUFDO1lBQzFELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVPLG9DQUFNLEdBQWQsVUFBZSxHQUFXO1lBQ3hCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQzVDO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztRQUVELCtDQUFpQixHQUFqQixVQUFrQixXQUEwQztZQUE1RCxpQkErQkM7WUE3QkMsSUFBSSxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRTtvQkFDdEMsTUFBTSxrQkFBVyxDQUFDLE1BQ2QsZ0JBQVMsQ0FBQyxXQUFXO3lCQUNOLGFBQWEsQ0FBQyw0REFBeUQsQ0FBQyxDQUFDO2lCQUM3RjtnQkFDRCxJQUFJLE9BQU8sV0FBVyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7b0JBQzVDLE1BQU0sa0JBQVcsQ0FBQywwQ0FDZCxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMscUJBQWtCLENBQUMsQ0FBQztpQkFDN0Q7YUFDRjtpQkFBTSxJQUFJLGdCQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUM3QyxJQUFJLE9BQU8sV0FBVyxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7b0JBQy9DLE1BQU0sa0JBQVcsQ0FBQyw2Q0FDZCxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMscUJBQWtCLENBQUMsQ0FBQztpQkFDN0Q7YUFDRjtpQkFBTTtnQkFDTCxNQUFNLGtCQUFXLENBQ2IseUNBQXVDLGdCQUFTLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBRyxDQUFDLENBQUM7YUFDcEY7WUFFRCxJQUFJLGdCQUFTLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO2dCQUMxQyxPQUFPLFdBQVcsQ0FBQyxtQkFBbUIsS0FBSyxTQUFTLEVBQUU7Z0JBQ3hELE1BQU0sa0JBQVcsQ0FBQyxrREFDZCxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsdUJBQW9CLENBQUMsQ0FBQzthQUMvRDtZQUVELE9BQU8sZ0JBQVMsQ0FBQyxJQUFJLENBQ2pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsRUFDbkMsVUFBQyxpQkFBaUIsSUFBSyxPQUFBLEtBQUksQ0FBQywwQkFBMEIsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsRUFBL0QsQ0FBK0QsQ0FBQyxDQUFDO1FBQzlGLENBQUM7UUFFTywrQ0FBaUIsR0FBekIsVUFBMEIsVUFBeUM7WUFBbkUsaUJBYUM7WUFYQyxJQUFJLFFBQTJCLENBQUM7WUFDaEMsSUFBSSxXQUFtQixDQUFDO1lBQ3hCLElBQUksVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQy9CLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO2dCQUMvQixXQUFXLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQzthQUNwQztpQkFBTTtnQkFDTCxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsV0FBWSxDQUFDLENBQUM7Z0JBQ3ZGLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsT0FBTyxnQkFBUyxDQUFDLElBQUksQ0FDakIsUUFBUSxFQUFFLFVBQUMsUUFBUSxJQUFLLE9BQUEsS0FBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQS9ELENBQStELENBQUMsQ0FBQztRQUMvRixDQUFDO1FBRU8scURBQXVCLEdBQS9CLFVBQ0ksV0FBMEMsRUFBRSxRQUFnQixFQUM1RCxjQUFzQjtZQUN4QixJQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztZQUN4QyxJQUFNLG1CQUFtQixHQUFHLDBDQUFtQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsYUFBYyxDQUFDLENBQUM7WUFDdEYsSUFBTSxXQUFXLEdBQUcsb0NBQWlCLENBQ2pDLEVBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxZQUFZLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxFQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsYUFBYSxFQUFDLEVBQUMsRUFDckYsRUFBQyxRQUFRLFVBQUEsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFDLENBQUMsQ0FBQztZQUM3QyxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUM3QyxRQUFRLEVBQUUsV0FBVyxFQUFFLEVBQUMsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixxQkFBQSxFQUFDLENBQUMsQ0FBQztZQUNoRixJQUFJLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QyxJQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6RCxNQUFNLGtCQUFXLENBQUMsNkJBQTJCLFdBQWEsQ0FBQyxDQUFDO2FBQzdEO1lBRUQsSUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSw0Q0FBeUIsQ0FDbEYsRUFBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQztZQUVyRSxJQUFNLE9BQU8sR0FBRyxJQUFJLHVCQUF1QixFQUFFLENBQUM7WUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDckQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksNENBQXlCLENBQzFFLEVBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBQyxDQUFDLENBQUMsQ0FBQztZQUV4RixJQUFNLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUzRSxJQUFNLGVBQWUsR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxRixJQUFNLFNBQVMsR0FBRyxJQUFJO2lCQUNDLG9CQUFvQixDQUFDLElBQUksNENBQXlCLENBQy9DLEVBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO2lCQUN6RSxTQUFTLENBQUM7WUFDakMsT0FBTztnQkFDTCxRQUFRLFVBQUE7Z0JBQ1IsV0FBVyxFQUFFLGNBQWM7Z0JBQzNCLFFBQVEsVUFBQTtnQkFDUixPQUFPLEVBQUUsa0JBQWtCO2dCQUMzQixNQUFNLFFBQUE7Z0JBQ04sZUFBZSxpQkFBQTtnQkFDZixTQUFTLFdBQUE7Z0JBQ1Qsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLGtCQUFrQjthQUMvQyxDQUFDO1FBQ0osQ0FBQztRQUVPLHdEQUEwQixHQUFsQyxVQUNJLFdBQTBDLEVBQzFDLGlCQUFvQztZQUZ4QyxpQkFRQztZQUxDLE9BQU8sZ0JBQVMsQ0FBQyxJQUFJLENBQ2pCLElBQUksQ0FBQywrQkFBK0IsQ0FDaEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUMxRSxVQUFDLG1CQUFtQixJQUFLLE9BQUEsS0FBSSxDQUFDLGdDQUFnQyxDQUMxRCxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUMsRUFEL0IsQ0FDK0IsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFFTyw4REFBZ0MsR0FBeEMsVUFDSSxXQUEwQyxFQUFFLGlCQUFvQyxFQUNoRixXQUFtRDtZQUNyRCxhQUFhO1lBQ2IscURBQXFEO1lBQ3JELHNFQUFzRTtZQUN0RSwrRkFBK0Y7WUFDL0YsbUZBQW1GO1lBQ25GLGdHQUFnRztZQUNoRyxxQ0FBcUM7WUFUdkMsaUJBNkNDO1lBbENDLElBQU0sTUFBTSw0Q0FBTyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0UsSUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1lBRTlDLElBQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVE7Z0JBQ2hELElBQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFFLENBQUM7Z0JBQzlDLElBQU0sTUFBTSw0Q0FBTyxVQUFVLENBQUMsTUFBTSxFQUFDLENBQUM7Z0JBQ3RDLEtBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzlELE9BQU8sSUFBSSw0Q0FBeUIsQ0FBQyxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7WUFDOUUsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLGFBQWEsR0FBRyxXQUFXLENBQUMsYUFBYSxDQUFDO1lBQzlDLElBQUksYUFBYSxJQUFJLElBQUksRUFBRTtnQkFDekIsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7YUFDbkQ7WUFDRCxJQUFJLGFBQWEsS0FBSyx3QkFBaUIsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUNuRSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDMUIsYUFBYSxHQUFHLHdCQUFpQixDQUFDLElBQUksQ0FBQzthQUN4QztZQUNELE9BQU8sSUFBSSwwQ0FBdUIsQ0FBQztnQkFDakMsYUFBYSxlQUFBO2dCQUNiLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRO2dCQUNwQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsV0FBVztnQkFDMUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLE9BQU87Z0JBQ2xDLE1BQU0sUUFBQTtnQkFDTixTQUFTLFdBQUE7Z0JBQ1Qsa0JBQWtCLEVBQUUsaUJBQWlCLENBQUMsa0JBQWtCO2dCQUN4RCxVQUFVLEVBQUUsV0FBVyxDQUFDLFVBQVU7Z0JBQ2xDLGFBQWEsRUFBRSxXQUFXLENBQUMsYUFBYTtnQkFDeEMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLFFBQVE7Z0JBQ3BDLG1CQUFtQixxQkFBQTtnQkFDbkIsbUJBQW1CLEVBQUUsbUNBQTBCLENBQzNDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO2FBQ3ZFLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFTywyQ0FBYSxHQUFyQixVQUNJLFNBQW1CLEVBQUUsV0FBbUQsRUFDeEUsWUFBc0I7WUFGMUIsaUJBUUM7WUFMQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsUUFBUTtnQkFDeEIsSUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUUsQ0FBQztnQkFDOUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7Z0JBQzdELEtBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDdEUsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBRU8sNkRBQStCLEdBQXZDLFVBQ0ksU0FBbUIsRUFDbkIsaUJBQ3lGO1lBSDdGLGlCQW1CQztZQWpCRyxrQ0FBQSxFQUFBLHdCQUNpRCxHQUFHLEVBQXFDO1lBRTNGLE9BQU8sZ0JBQVMsQ0FBQyxJQUFJLENBQ2pCLGdCQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFRLElBQUssT0FBQSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQztpQkFDM0QsR0FBRyxDQUNBLFVBQUEsUUFBUSxJQUFJLE9BQUEsZ0JBQVMsQ0FBQyxJQUFJLENBQ3RCLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQ3JCLFVBQUMsV0FBVztnQkFDVixJQUFNLFVBQVUsR0FDWixLQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSw0Q0FBeUIsQ0FDbkQsRUFBQyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUM1QyxPQUFPLEtBQUksQ0FBQywrQkFBK0IsQ0FDdkMsVUFBVSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9DLENBQUMsQ0FBQyxFQVRNLENBU04sQ0FBQyxDQUFDLEVBQzlCLFVBQUMsQ0FBQyxJQUFLLE9BQUEsaUJBQWlCLEVBQWpCLENBQWlCLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBRU8sa0RBQW9CLEdBQTVCLFVBQTZCLFVBQXFDO1lBQWxFLGlCQWFDO1lBWkMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVUsQ0FBQztZQUN4QyxJQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyx5Q0FBb0IsQ0FBQztpQkFDNUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUF6QyxDQUF5QyxDQUFDLENBQUM7WUFFaEYsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO2dCQUMzQyxJQUFNLGdCQUFnQixHQUFHLHFDQUFnQixDQUFDLEtBQUksQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMvRSxZQUFZLENBQUMsSUFBSSxPQUFqQixZQUFZLDJDQUFTLGdCQUFnQixDQUFDLFNBQVMsSUFBRTtnQkFDakQsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLElBQUksNENBQXlCLENBQ2hDLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUM7UUFDSCwwQkFBQztJQUFELENBQUMsQUEvTkQsSUErTkM7SUEvTlksa0RBQW1CO0lBNE9oQztRQUFBO1lBQ0UsdUJBQWtCLEdBQWEsRUFBRSxDQUFDO1lBQ2xDLFdBQU0sR0FBYSxFQUFFLENBQUM7WUFDdEIsY0FBUyxHQUFhLEVBQUUsQ0FBQztZQUN6Qiw0QkFBdUIsR0FBVyxDQUFDLENBQUM7UUFvRHRDLENBQUM7UUFsREMsOENBQVksR0FBWixVQUFhLEdBQWlCLEVBQUUsT0FBWTtZQUMxQyxJQUFNLGdCQUFnQixHQUFHLG9DQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUMsUUFBUSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7Z0JBQzdCLEtBQUsseUNBQW9CLENBQUMsVUFBVTtvQkFDbEMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEtBQUssQ0FBQyxFQUFFO3dCQUN0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO3FCQUMzRDtvQkFDRCxNQUFNO2dCQUNSLEtBQUsseUNBQW9CLENBQUMsS0FBSztvQkFDN0IsSUFBSSxhQUFXLEdBQUcsRUFBRSxDQUFDO29CQUNyQixHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7d0JBQ3hCLElBQUksS0FBSyxZQUFZLElBQUksQ0FBQyxJQUFJLEVBQUU7NEJBQzlCLGFBQVcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO3lCQUM1QjtvQkFDSCxDQUFDLENBQUMsQ0FBQztvQkFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFXLENBQUMsQ0FBQztvQkFDOUIsTUFBTTtnQkFDUixLQUFLLHlDQUFvQixDQUFDLFVBQVU7b0JBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUMvQyxNQUFNO2dCQUNSO29CQUNFLE1BQU07YUFDVDtZQUNELElBQUksZ0JBQWdCLENBQUMsV0FBVyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQzthQUNoQztZQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsQyxJQUFJLGdCQUFnQixDQUFDLFdBQVcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7YUFDaEM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxnREFBYyxHQUFkLFVBQWUsR0FBbUIsRUFBRSxPQUFZO1lBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsb0RBQWtCLEdBQWxCLFVBQW1CLEdBQXVCLEVBQUUsT0FBWTtZQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUVELDhDQUFZLEdBQVosVUFBYSxHQUFpQixFQUFFLE9BQVk7WUFDMUMsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsZ0RBQWMsR0FBZCxVQUFlLEdBQW1CLEVBQUUsT0FBWTtZQUM5QyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCwyQ0FBUyxHQUFULFVBQVUsR0FBYyxFQUFFLE9BQVk7WUFDcEMsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0gsOEJBQUM7SUFBRCxDQUFDLEFBeERELElBd0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Q29tcGlsZURpcmVjdGl2ZU1ldGFkYXRhLCBDb21waWxlU3R5bGVzaGVldE1ldGFkYXRhLCBDb21waWxlVGVtcGxhdGVNZXRhZGF0YSwgdGVtcGxhdGVTb3VyY2VVcmx9IGZyb20gJy4vY29tcGlsZV9tZXRhZGF0YSc7XG5pbXBvcnQge0NvbXBpbGVyQ29uZmlnLCBwcmVzZXJ2ZVdoaXRlc3BhY2VzRGVmYXVsdH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHtWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCAqIGFzIGh0bWwgZnJvbSAnLi9tbF9wYXJzZXIvYXN0JztcbmltcG9ydCB7SHRtbFBhcnNlcn0gZnJvbSAnLi9tbF9wYXJzZXIvaHRtbF9wYXJzZXInO1xuaW1wb3J0IHtJbnRlcnBvbGF0aW9uQ29uZmlnfSBmcm9tICcuL21sX3BhcnNlci9pbnRlcnBvbGF0aW9uX2NvbmZpZyc7XG5pbXBvcnQge1BhcnNlVHJlZVJlc3VsdCBhcyBIdG1sUGFyc2VUcmVlUmVzdWx0fSBmcm9tICcuL21sX3BhcnNlci9wYXJzZXInO1xuaW1wb3J0IHtSZXNvdXJjZUxvYWRlcn0gZnJvbSAnLi9yZXNvdXJjZV9sb2FkZXInO1xuaW1wb3J0IHtleHRyYWN0U3R5bGVVcmxzLCBpc1N0eWxlVXJsUmVzb2x2YWJsZX0gZnJvbSAnLi9zdHlsZV91cmxfcmVzb2x2ZXInO1xuaW1wb3J0IHtQcmVwYXJzZWRFbGVtZW50VHlwZSwgcHJlcGFyc2VFbGVtZW50fSBmcm9tICcuL3RlbXBsYXRlX3BhcnNlci90ZW1wbGF0ZV9wcmVwYXJzZXInO1xuaW1wb3J0IHtVcmxSZXNvbHZlcn0gZnJvbSAnLi91cmxfcmVzb2x2ZXInO1xuaW1wb3J0IHtpc0RlZmluZWQsIHN0cmluZ2lmeSwgU3luY0FzeW5jLCBzeW50YXhFcnJvcn0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBQcmVub3JtYWxpemVkVGVtcGxhdGVNZXRhZGF0YSB7XG4gIG5nTW9kdWxlVHlwZTogYW55O1xuICBjb21wb25lbnRUeXBlOiBhbnk7XG4gIG1vZHVsZVVybDogc3RyaW5nO1xuICB0ZW1wbGF0ZTogc3RyaW5nfG51bGw7XG4gIHRlbXBsYXRlVXJsOiBzdHJpbmd8bnVsbDtcbiAgc3R5bGVzOiBzdHJpbmdbXTtcbiAgc3R5bGVVcmxzOiBzdHJpbmdbXTtcbiAgaW50ZXJwb2xhdGlvbjogW3N0cmluZywgc3RyaW5nXXxudWxsO1xuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbnxudWxsO1xuICBhbmltYXRpb25zOiBhbnlbXTtcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogYm9vbGVhbnxudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgRGlyZWN0aXZlTm9ybWFsaXplciB7XG4gIHByaXZhdGUgX3Jlc291cmNlTG9hZGVyQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgU3luY0FzeW5jPHN0cmluZz4+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIF9yZXNvdXJjZUxvYWRlcjogUmVzb3VyY2VMb2FkZXIsIHByaXZhdGUgX3VybFJlc29sdmVyOiBVcmxSZXNvbHZlcixcbiAgICAgIHByaXZhdGUgX2h0bWxQYXJzZXI6IEh0bWxQYXJzZXIsIHByaXZhdGUgX2NvbmZpZzogQ29tcGlsZXJDb25maWcpIHt9XG5cbiAgY2xlYXJDYWNoZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXNvdXJjZUxvYWRlckNhY2hlLmNsZWFyKCk7XG4gIH1cblxuICBjbGVhckNhY2hlRm9yKG5vcm1hbGl6ZWREaXJlY3RpdmU6IENvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YSk6IHZvaWQge1xuICAgIGlmICghbm9ybWFsaXplZERpcmVjdGl2ZS5pc0NvbXBvbmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IG5vcm1hbGl6ZWREaXJlY3RpdmUudGVtcGxhdGUgITtcbiAgICB0aGlzLl9yZXNvdXJjZUxvYWRlckNhY2hlLmRlbGV0ZSh0ZW1wbGF0ZS50ZW1wbGF0ZVVybCEpO1xuICAgIHRlbXBsYXRlLmV4dGVybmFsU3R5bGVzaGVldHMuZm9yRWFjaCgoc3R5bGVzaGVldCkgPT4ge1xuICAgICAgdGhpcy5fcmVzb3VyY2VMb2FkZXJDYWNoZS5kZWxldGUoc3R5bGVzaGVldC5tb2R1bGVVcmwhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZldGNoKHVybDogc3RyaW5nKTogU3luY0FzeW5jPHN0cmluZz4ge1xuICAgIGxldCByZXN1bHQgPSB0aGlzLl9yZXNvdXJjZUxvYWRlckNhY2hlLmdldCh1cmwpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9yZXNvdXJjZUxvYWRlci5nZXQodXJsKTtcbiAgICAgIHRoaXMuX3Jlc291cmNlTG9hZGVyQ2FjaGUuc2V0KHVybCwgcmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIG5vcm1hbGl6ZVRlbXBsYXRlKHByZW5vcm1EYXRhOiBQcmVub3JtYWxpemVkVGVtcGxhdGVNZXRhZGF0YSk6XG4gICAgICBTeW5jQXN5bmM8Q29tcGlsZVRlbXBsYXRlTWV0YWRhdGE+IHtcbiAgICBpZiAoaXNEZWZpbmVkKHByZW5vcm1EYXRhLnRlbXBsYXRlKSkge1xuICAgICAgaWYgKGlzRGVmaW5lZChwcmVub3JtRGF0YS50ZW1wbGF0ZVVybCkpIHtcbiAgICAgICAgdGhyb3cgc3ludGF4RXJyb3IoYCcke1xuICAgICAgICAgICAgc3RyaW5naWZ5KHByZW5vcm1EYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jb21wb25lbnRUeXBlKX0nIGNvbXBvbmVudCBjYW5ub3QgZGVmaW5lIGJvdGggdGVtcGxhdGUgYW5kIHRlbXBsYXRlVXJsYCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByZW5vcm1EYXRhLnRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBzeW50YXhFcnJvcihgVGhlIHRlbXBsYXRlIHNwZWNpZmllZCBmb3IgY29tcG9uZW50ICR7XG4gICAgICAgICAgICBzdHJpbmdpZnkocHJlbm9ybURhdGEuY29tcG9uZW50VHlwZSl9IGlzIG5vdCBhIHN0cmluZ2ApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKHByZW5vcm1EYXRhLnRlbXBsYXRlVXJsKSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVub3JtRGF0YS50ZW1wbGF0ZVVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgc3ludGF4RXJyb3IoYFRoZSB0ZW1wbGF0ZVVybCBzcGVjaWZpZWQgZm9yIGNvbXBvbmVudCAke1xuICAgICAgICAgICAgc3RyaW5naWZ5KHByZW5vcm1EYXRhLmNvbXBvbmVudFR5cGUpfSBpcyBub3QgYSBzdHJpbmdgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgc3ludGF4RXJyb3IoXG4gICAgICAgICAgYE5vIHRlbXBsYXRlIHNwZWNpZmllZCBmb3IgY29tcG9uZW50ICR7c3RyaW5naWZ5KHByZW5vcm1EYXRhLmNvbXBvbmVudFR5cGUpfWApO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmluZWQocHJlbm9ybURhdGEucHJlc2VydmVXaGl0ZXNwYWNlcykgJiZcbiAgICAgICAgdHlwZW9mIHByZW5vcm1EYXRhLnByZXNlcnZlV2hpdGVzcGFjZXMgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgc3ludGF4RXJyb3IoYFRoZSBwcmVzZXJ2ZVdoaXRlc3BhY2VzIG9wdGlvbiBmb3IgY29tcG9uZW50ICR7XG4gICAgICAgICAgc3RyaW5naWZ5KHByZW5vcm1EYXRhLmNvbXBvbmVudFR5cGUpfSBtdXN0IGJlIGEgYm9vbGVhbmApO1xuICAgIH1cblxuICAgIHJldHVybiBTeW5jQXN5bmMudGhlbihcbiAgICAgICAgdGhpcy5fcHJlUGFyc2VUZW1wbGF0ZShwcmVub3JtRGF0YSksXG4gICAgICAgIChwcmVwYXJzZWRUZW1wbGF0ZSkgPT4gdGhpcy5fbm9ybWFsaXplVGVtcGxhdGVNZXRhZGF0YShwcmVub3JtRGF0YSwgcHJlcGFyc2VkVGVtcGxhdGUpKTtcbiAgfVxuXG4gIHByaXZhdGUgX3ByZVBhcnNlVGVtcGxhdGUocHJlbm9tRGF0YTogUHJlbm9ybWFsaXplZFRlbXBsYXRlTWV0YWRhdGEpOlxuICAgICAgU3luY0FzeW5jPFByZXBhcnNlZFRlbXBsYXRlPiB7XG4gICAgbGV0IHRlbXBsYXRlOiBTeW5jQXN5bmM8c3RyaW5nPjtcbiAgICBsZXQgdGVtcGxhdGVVcmw6IHN0cmluZztcbiAgICBpZiAocHJlbm9tRGF0YS50ZW1wbGF0ZSAhPSBudWxsKSB7XG4gICAgICB0ZW1wbGF0ZSA9IHByZW5vbURhdGEudGVtcGxhdGU7XG4gICAgICB0ZW1wbGF0ZVVybCA9IHByZW5vbURhdGEubW9kdWxlVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZVVybCA9IHRoaXMuX3VybFJlc29sdmVyLnJlc29sdmUocHJlbm9tRGF0YS5tb2R1bGVVcmwsIHByZW5vbURhdGEudGVtcGxhdGVVcmwhKTtcbiAgICAgIHRlbXBsYXRlID0gdGhpcy5fZmV0Y2godGVtcGxhdGVVcmwpO1xuICAgIH1cbiAgICByZXR1cm4gU3luY0FzeW5jLnRoZW4oXG4gICAgICAgIHRlbXBsYXRlLCAodGVtcGxhdGUpID0+IHRoaXMuX3ByZXBhcnNlTG9hZGVkVGVtcGxhdGUocHJlbm9tRGF0YSwgdGVtcGxhdGUsIHRlbXBsYXRlVXJsKSk7XG4gIH1cblxuICBwcml2YXRlIF9wcmVwYXJzZUxvYWRlZFRlbXBsYXRlKFxuICAgICAgcHJlbm9ybURhdGE6IFByZW5vcm1hbGl6ZWRUZW1wbGF0ZU1ldGFkYXRhLCB0ZW1wbGF0ZTogc3RyaW5nLFxuICAgICAgdGVtcGxhdGVBYnNVcmw6IHN0cmluZyk6IFByZXBhcnNlZFRlbXBsYXRlIHtcbiAgICBjb25zdCBpc0lubGluZSA9ICEhcHJlbm9ybURhdGEudGVtcGxhdGU7XG4gICAgY29uc3QgaW50ZXJwb2xhdGlvbkNvbmZpZyA9IEludGVycG9sYXRpb25Db25maWcuZnJvbUFycmF5KHByZW5vcm1EYXRhLmludGVycG9sYXRpb24hKTtcbiAgICBjb25zdCB0ZW1wbGF0ZVVybCA9IHRlbXBsYXRlU291cmNlVXJsKFxuICAgICAgICB7cmVmZXJlbmNlOiBwcmVub3JtRGF0YS5uZ01vZHVsZVR5cGV9LCB7dHlwZToge3JlZmVyZW5jZTogcHJlbm9ybURhdGEuY29tcG9uZW50VHlwZX19LFxuICAgICAgICB7aXNJbmxpbmUsIHRlbXBsYXRlVXJsOiB0ZW1wbGF0ZUFic1VybH0pO1xuICAgIGNvbnN0IHJvb3ROb2Rlc0FuZEVycm9ycyA9IHRoaXMuX2h0bWxQYXJzZXIucGFyc2UoXG4gICAgICAgIHRlbXBsYXRlLCB0ZW1wbGF0ZVVybCwge3Rva2VuaXplRXhwYW5zaW9uRm9ybXM6IHRydWUsIGludGVycG9sYXRpb25Db25maWd9KTtcbiAgICBpZiAocm9vdE5vZGVzQW5kRXJyb3JzLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBlcnJvclN0cmluZyA9IHJvb3ROb2Rlc0FuZEVycm9ycy5lcnJvcnMuam9pbignXFxuJyk7XG4gICAgICB0aHJvdyBzeW50YXhFcnJvcihgVGVtcGxhdGUgcGFyc2UgZXJyb3JzOlxcbiR7ZXJyb3JTdHJpbmd9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGVNZXRhZGF0YVN0eWxlcyA9IHRoaXMuX25vcm1hbGl6ZVN0eWxlc2hlZXQobmV3IENvbXBpbGVTdHlsZXNoZWV0TWV0YWRhdGEoXG4gICAgICAgIHtzdHlsZXM6IHByZW5vcm1EYXRhLnN0eWxlcywgbW9kdWxlVXJsOiBwcmVub3JtRGF0YS5tb2R1bGVVcmx9KSk7XG5cbiAgICBjb25zdCB2aXNpdG9yID0gbmV3IFRlbXBsYXRlUHJlcGFyc2VWaXNpdG9yKCk7XG4gICAgaHRtbC52aXNpdEFsbCh2aXNpdG9yLCByb290Tm9kZXNBbmRFcnJvcnMucm9vdE5vZGVzKTtcbiAgICBjb25zdCB0ZW1wbGF0ZVN0eWxlcyA9IHRoaXMuX25vcm1hbGl6ZVN0eWxlc2hlZXQobmV3IENvbXBpbGVTdHlsZXNoZWV0TWV0YWRhdGEoXG4gICAgICAgIHtzdHlsZXM6IHZpc2l0b3Iuc3R5bGVzLCBzdHlsZVVybHM6IHZpc2l0b3Iuc3R5bGVVcmxzLCBtb2R1bGVVcmw6IHRlbXBsYXRlQWJzVXJsfSkpO1xuXG4gICAgY29uc3Qgc3R5bGVzID0gdGVtcGxhdGVNZXRhZGF0YVN0eWxlcy5zdHlsZXMuY29uY2F0KHRlbXBsYXRlU3R5bGVzLnN0eWxlcyk7XG5cbiAgICBjb25zdCBpbmxpbmVTdHlsZVVybHMgPSB0ZW1wbGF0ZU1ldGFkYXRhU3R5bGVzLnN0eWxlVXJscy5jb25jYXQodGVtcGxhdGVTdHlsZXMuc3R5bGVVcmxzKTtcbiAgICBjb25zdCBzdHlsZVVybHMgPSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5fbm9ybWFsaXplU3R5bGVzaGVldChuZXcgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdHlsZVVybHM6IHByZW5vcm1EYXRhLnN0eWxlVXJscywgbW9kdWxlVXJsOiBwcmVub3JtRGF0YS5tb2R1bGVVcmx9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlVXJscztcbiAgICByZXR1cm4ge1xuICAgICAgdGVtcGxhdGUsXG4gICAgICB0ZW1wbGF0ZVVybDogdGVtcGxhdGVBYnNVcmwsXG4gICAgICBpc0lubGluZSxcbiAgICAgIGh0bWxBc3Q6IHJvb3ROb2Rlc0FuZEVycm9ycyxcbiAgICAgIHN0eWxlcyxcbiAgICAgIGlubGluZVN0eWxlVXJscyxcbiAgICAgIHN0eWxlVXJscyxcbiAgICAgIG5nQ29udGVudFNlbGVjdG9yczogdmlzaXRvci5uZ0NvbnRlbnRTZWxlY3RvcnMsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgX25vcm1hbGl6ZVRlbXBsYXRlTWV0YWRhdGEoXG4gICAgICBwcmVub3JtRGF0YTogUHJlbm9ybWFsaXplZFRlbXBsYXRlTWV0YWRhdGEsXG4gICAgICBwcmVwYXJzZWRUZW1wbGF0ZTogUHJlcGFyc2VkVGVtcGxhdGUpOiBTeW5jQXN5bmM8Q29tcGlsZVRlbXBsYXRlTWV0YWRhdGE+IHtcbiAgICByZXR1cm4gU3luY0FzeW5jLnRoZW4oXG4gICAgICAgIHRoaXMuX2xvYWRNaXNzaW5nRXh0ZXJuYWxTdHlsZXNoZWV0cyhcbiAgICAgICAgICAgIHByZXBhcnNlZFRlbXBsYXRlLnN0eWxlVXJscy5jb25jYXQocHJlcGFyc2VkVGVtcGxhdGUuaW5saW5lU3R5bGVVcmxzKSksXG4gICAgICAgIChleHRlcm5hbFN0eWxlc2hlZXRzKSA9PiB0aGlzLl9ub3JtYWxpemVMb2FkZWRUZW1wbGF0ZU1ldGFkYXRhKFxuICAgICAgICAgICAgcHJlbm9ybURhdGEsIHByZXBhcnNlZFRlbXBsYXRlLCBleHRlcm5hbFN0eWxlc2hlZXRzKSk7XG4gIH1cblxuICBwcml2YXRlIF9ub3JtYWxpemVMb2FkZWRUZW1wbGF0ZU1ldGFkYXRhKFxuICAgICAgcHJlbm9ybURhdGE6IFByZW5vcm1hbGl6ZWRUZW1wbGF0ZU1ldGFkYXRhLCBwcmVwYXJzZWRUZW1wbGF0ZTogUHJlcGFyc2VkVGVtcGxhdGUsXG4gICAgICBzdHlsZXNoZWV0czogTWFwPHN0cmluZywgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YT4pOiBDb21waWxlVGVtcGxhdGVNZXRhZGF0YSB7XG4gICAgLy8gQWxnb3JpdGhtOlxuICAgIC8vIC0gcHJvZHVjZSBleGFjdGx5IDEgZW50cnkgcGVyIG9yaWdpbmFsIHN0eWxlVXJsIGluXG4gICAgLy8gQ29tcGlsZVRlbXBsYXRlTWV0YWRhdGEuZXh0ZXJuYWxTdHlsZXNoZWV0cyB3aXRoIGFsbCBzdHlsZXMgaW5saW5lZFxuICAgIC8vIC0gaW5saW5lIGFsbCBzdHlsZXMgdGhhdCBhcmUgcmVmZXJlbmNlZCBieSB0aGUgdGVtcGxhdGUgaW50byBDb21waWxlVGVtcGxhdGVNZXRhZGF0YS5zdHlsZXMuXG4gICAgLy8gUmVhc29uOiBiZSBhYmxlIHRvIGRldGVybWluZSBob3cgbWFueSBzdHlsZXNoZWV0cyB0aGVyZSBhcmUgZXZlbiB3aXRob3V0IGxvYWRpbmdcbiAgICAvLyB0aGUgdGVtcGxhdGUgbm9yIHRoZSBzdHlsZXNoZWV0cywgc28gd2UgY2FuIGNyZWF0ZSBhIHN0dWIgZm9yIFR5cGVTY3JpcHQgYWx3YXlzIHN5bmNocm9ub3VzbHlcbiAgICAvLyAoYXMgcmVzb3VyY2UgbG9hZGluZyBtYXkgYmUgYXN5bmMpXG5cbiAgICBjb25zdCBzdHlsZXMgPSBbLi4ucHJlcGFyc2VkVGVtcGxhdGUuc3R5bGVzXTtcbiAgICB0aGlzLl9pbmxpbmVTdHlsZXMocHJlcGFyc2VkVGVtcGxhdGUuaW5saW5lU3R5bGVVcmxzLCBzdHlsZXNoZWV0cywgc3R5bGVzKTtcbiAgICBjb25zdCBzdHlsZVVybHMgPSBwcmVwYXJzZWRUZW1wbGF0ZS5zdHlsZVVybHM7XG5cbiAgICBjb25zdCBleHRlcm5hbFN0eWxlc2hlZXRzID0gc3R5bGVVcmxzLm1hcChzdHlsZVVybCA9PiB7XG4gICAgICBjb25zdCBzdHlsZXNoZWV0ID0gc3R5bGVzaGVldHMuZ2V0KHN0eWxlVXJsKSE7XG4gICAgICBjb25zdCBzdHlsZXMgPSBbLi4uc3R5bGVzaGVldC5zdHlsZXNdO1xuICAgICAgdGhpcy5faW5saW5lU3R5bGVzKHN0eWxlc2hlZXQuc3R5bGVVcmxzLCBzdHlsZXNoZWV0cywgc3R5bGVzKTtcbiAgICAgIHJldHVybiBuZXcgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YSh7bW9kdWxlVXJsOiBzdHlsZVVybCwgc3R5bGVzOiBzdHlsZXN9KTtcbiAgICB9KTtcblxuICAgIGxldCBlbmNhcHN1bGF0aW9uID0gcHJlbm9ybURhdGEuZW5jYXBzdWxhdGlvbjtcbiAgICBpZiAoZW5jYXBzdWxhdGlvbiA9PSBudWxsKSB7XG4gICAgICBlbmNhcHN1bGF0aW9uID0gdGhpcy5fY29uZmlnLmRlZmF1bHRFbmNhcHN1bGF0aW9uO1xuICAgIH1cbiAgICBpZiAoZW5jYXBzdWxhdGlvbiA9PT0gVmlld0VuY2Fwc3VsYXRpb24uRW11bGF0ZWQgJiYgc3R5bGVzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICBzdHlsZVVybHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBlbmNhcHN1bGF0aW9uID0gVmlld0VuY2Fwc3VsYXRpb24uTm9uZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb21waWxlVGVtcGxhdGVNZXRhZGF0YSh7XG4gICAgICBlbmNhcHN1bGF0aW9uLFxuICAgICAgdGVtcGxhdGU6IHByZXBhcnNlZFRlbXBsYXRlLnRlbXBsYXRlLFxuICAgICAgdGVtcGxhdGVVcmw6IHByZXBhcnNlZFRlbXBsYXRlLnRlbXBsYXRlVXJsLFxuICAgICAgaHRtbEFzdDogcHJlcGFyc2VkVGVtcGxhdGUuaHRtbEFzdCxcbiAgICAgIHN0eWxlcyxcbiAgICAgIHN0eWxlVXJscyxcbiAgICAgIG5nQ29udGVudFNlbGVjdG9yczogcHJlcGFyc2VkVGVtcGxhdGUubmdDb250ZW50U2VsZWN0b3JzLFxuICAgICAgYW5pbWF0aW9uczogcHJlbm9ybURhdGEuYW5pbWF0aW9ucyxcbiAgICAgIGludGVycG9sYXRpb246IHByZW5vcm1EYXRhLmludGVycG9sYXRpb24sXG4gICAgICBpc0lubGluZTogcHJlcGFyc2VkVGVtcGxhdGUuaXNJbmxpbmUsXG4gICAgICBleHRlcm5hbFN0eWxlc2hlZXRzLFxuICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlczogcHJlc2VydmVXaGl0ZXNwYWNlc0RlZmF1bHQoXG4gICAgICAgICAgcHJlbm9ybURhdGEucHJlc2VydmVXaGl0ZXNwYWNlcywgdGhpcy5fY29uZmlnLnByZXNlcnZlV2hpdGVzcGFjZXMpLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5saW5lU3R5bGVzKFxuICAgICAgc3R5bGVVcmxzOiBzdHJpbmdbXSwgc3R5bGVzaGVldHM6IE1hcDxzdHJpbmcsIENvbXBpbGVTdHlsZXNoZWV0TWV0YWRhdGE+LFxuICAgICAgdGFyZ2V0U3R5bGVzOiBzdHJpbmdbXSkge1xuICAgIHN0eWxlVXJscy5mb3JFYWNoKHN0eWxlVXJsID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlc2hlZXQgPSBzdHlsZXNoZWV0cy5nZXQoc3R5bGVVcmwpITtcbiAgICAgIHN0eWxlc2hlZXQuc3R5bGVzLmZvckVhY2goc3R5bGUgPT4gdGFyZ2V0U3R5bGVzLnB1c2goc3R5bGUpKTtcbiAgICAgIHRoaXMuX2lubGluZVN0eWxlcyhzdHlsZXNoZWV0LnN0eWxlVXJscywgc3R5bGVzaGVldHMsIHRhcmdldFN0eWxlcyk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9sb2FkTWlzc2luZ0V4dGVybmFsU3R5bGVzaGVldHMoXG4gICAgICBzdHlsZVVybHM6IHN0cmluZ1tdLFxuICAgICAgbG9hZGVkU3R5bGVzaGVldHM6XG4gICAgICAgICAgTWFwPHN0cmluZywgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YT4gPSBuZXcgTWFwPHN0cmluZywgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YT4oKSk6XG4gICAgICBTeW5jQXN5bmM8TWFwPHN0cmluZywgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YT4+IHtcbiAgICByZXR1cm4gU3luY0FzeW5jLnRoZW4oXG4gICAgICAgIFN5bmNBc3luYy5hbGwoc3R5bGVVcmxzLmZpbHRlcigoc3R5bGVVcmwpID0+ICFsb2FkZWRTdHlsZXNoZWV0cy5oYXMoc3R5bGVVcmwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVVcmwgPT4gU3luY0FzeW5jLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmV0Y2goc3R5bGVVcmwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsb2FkZWRTdHlsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzaGVldCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9ybWFsaXplU3R5bGVzaGVldChuZXcgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0eWxlczogW2xvYWRlZFN0eWxlXSwgbW9kdWxlVXJsOiBzdHlsZVVybH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZFN0eWxlc2hlZXRzLnNldChzdHlsZVVybCwgc3R5bGVzaGVldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZE1pc3NpbmdFeHRlcm5hbFN0eWxlc2hlZXRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQuc3R5bGVVcmxzLCBsb2FkZWRTdHlsZXNoZWV0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKSxcbiAgICAgICAgKF8pID0+IGxvYWRlZFN0eWxlc2hlZXRzKTtcbiAgfVxuXG4gIHByaXZhdGUgX25vcm1hbGl6ZVN0eWxlc2hlZXQoc3R5bGVzaGVldDogQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YSk6IENvbXBpbGVTdHlsZXNoZWV0TWV0YWRhdGEge1xuICAgIGNvbnN0IG1vZHVsZVVybCA9IHN0eWxlc2hlZXQubW9kdWxlVXJsITtcbiAgICBjb25zdCBhbGxTdHlsZVVybHMgPSBzdHlsZXNoZWV0LnN0eWxlVXJscy5maWx0ZXIoaXNTdHlsZVVybFJlc29sdmFibGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAodXJsID0+IHRoaXMuX3VybFJlc29sdmVyLnJlc29sdmUobW9kdWxlVXJsLCB1cmwpKTtcblxuICAgIGNvbnN0IGFsbFN0eWxlcyA9IHN0eWxlc2hlZXQuc3R5bGVzLm1hcChzdHlsZSA9PiB7XG4gICAgICBjb25zdCBzdHlsZVdpdGhJbXBvcnRzID0gZXh0cmFjdFN0eWxlVXJscyh0aGlzLl91cmxSZXNvbHZlciwgbW9kdWxlVXJsLCBzdHlsZSk7XG4gICAgICBhbGxTdHlsZVVybHMucHVzaCguLi5zdHlsZVdpdGhJbXBvcnRzLnN0eWxlVXJscyk7XG4gICAgICByZXR1cm4gc3R5bGVXaXRoSW1wb3J0cy5zdHlsZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgQ29tcGlsZVN0eWxlc2hlZXRNZXRhZGF0YShcbiAgICAgICAge3N0eWxlczogYWxsU3R5bGVzLCBzdHlsZVVybHM6IGFsbFN0eWxlVXJscywgbW9kdWxlVXJsOiBtb2R1bGVVcmx9KTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgUHJlcGFyc2VkVGVtcGxhdGUge1xuICB0ZW1wbGF0ZTogc3RyaW5nO1xuICB0ZW1wbGF0ZVVybDogc3RyaW5nO1xuICBpc0lubGluZTogYm9vbGVhbjtcbiAgaHRtbEFzdDogSHRtbFBhcnNlVHJlZVJlc3VsdDtcbiAgc3R5bGVzOiBzdHJpbmdbXTtcbiAgaW5saW5lU3R5bGVVcmxzOiBzdHJpbmdbXTtcbiAgc3R5bGVVcmxzOiBzdHJpbmdbXTtcbiAgbmdDb250ZW50U2VsZWN0b3JzOiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgVGVtcGxhdGVQcmVwYXJzZVZpc2l0b3IgaW1wbGVtZW50cyBodG1sLlZpc2l0b3Ige1xuICBuZ0NvbnRlbnRTZWxlY3RvcnM6IHN0cmluZ1tdID0gW107XG4gIHN0eWxlczogc3RyaW5nW10gPSBbXTtcbiAgc3R5bGVVcmxzOiBzdHJpbmdbXSA9IFtdO1xuICBuZ05vbkJpbmRhYmxlU3RhY2tDb3VudDogbnVtYmVyID0gMDtcblxuICB2aXNpdEVsZW1lbnQoYXN0OiBodG1sLkVsZW1lbnQsIGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgY29uc3QgcHJlcGFyc2VkRWxlbWVudCA9IHByZXBhcnNlRWxlbWVudChhc3QpO1xuICAgIHN3aXRjaCAocHJlcGFyc2VkRWxlbWVudC50eXBlKSB7XG4gICAgICBjYXNlIFByZXBhcnNlZEVsZW1lbnRUeXBlLk5HX0NPTlRFTlQ6XG4gICAgICAgIGlmICh0aGlzLm5nTm9uQmluZGFibGVTdGFja0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5uZ0NvbnRlbnRTZWxlY3RvcnMucHVzaChwcmVwYXJzZWRFbGVtZW50LnNlbGVjdEF0dHIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBQcmVwYXJzZWRFbGVtZW50VHlwZS5TVFlMRTpcbiAgICAgICAgbGV0IHRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIGFzdC5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBodG1sLlRleHQpIHtcbiAgICAgICAgICAgIHRleHRDb250ZW50ICs9IGNoaWxkLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3R5bGVzLnB1c2godGV4dENvbnRlbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUHJlcGFyc2VkRWxlbWVudFR5cGUuU1RZTEVTSEVFVDpcbiAgICAgICAgdGhpcy5zdHlsZVVybHMucHVzaChwcmVwYXJzZWRFbGVtZW50LmhyZWZBdHRyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHByZXBhcnNlZEVsZW1lbnQubm9uQmluZGFibGUpIHtcbiAgICAgIHRoaXMubmdOb25CaW5kYWJsZVN0YWNrQ291bnQrKztcbiAgICB9XG4gICAgaHRtbC52aXNpdEFsbCh0aGlzLCBhc3QuY2hpbGRyZW4pO1xuICAgIGlmIChwcmVwYXJzZWRFbGVtZW50Lm5vbkJpbmRhYmxlKSB7XG4gICAgICB0aGlzLm5nTm9uQmluZGFibGVTdGFja0NvdW50LS07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmlzaXRFeHBhbnNpb24oYXN0OiBodG1sLkV4cGFuc2lvbiwgY29udGV4dDogYW55KTogYW55IHtcbiAgICBodG1sLnZpc2l0QWxsKHRoaXMsIGFzdC5jYXNlcyk7XG4gIH1cblxuICB2aXNpdEV4cGFuc2lvbkNhc2UoYXN0OiBodG1sLkV4cGFuc2lvbkNhc2UsIGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgaHRtbC52aXNpdEFsbCh0aGlzLCBhc3QuZXhwcmVzc2lvbik7XG4gIH1cblxuICB2aXNpdENvbW1lbnQoYXN0OiBodG1sLkNvbW1lbnQsIGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmlzaXRBdHRyaWJ1dGUoYXN0OiBodG1sLkF0dHJpYnV0ZSwgY29udGV4dDogYW55KTogYW55IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2aXNpdFRleHQoYXN0OiBodG1sLlRleHQsIGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ=="]},"metadata":{},"sourceType":"script"}