{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/expression_parser/parser\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/chars\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/expression_parser/ast\", \"@angular/compiler/src/expression_parser/lexer\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._ParseAST = exports.IvyParser = exports.Parser = exports.TemplateBindingParseResult = exports.SplitInterpolation = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var chars = require(\"@angular/compiler/src/chars\");\n\n  var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n\n  var ast_1 = require(\"@angular/compiler/src/expression_parser/ast\");\n\n  var lexer_1 = require(\"@angular/compiler/src/expression_parser/lexer\");\n\n  var SplitInterpolation = function () {\n    function SplitInterpolation(strings, expressions, offsets) {\n      this.strings = strings;\n      this.expressions = expressions;\n      this.offsets = offsets;\n    }\n\n    return SplitInterpolation;\n  }();\n\n  exports.SplitInterpolation = SplitInterpolation;\n\n  var TemplateBindingParseResult = function () {\n    function TemplateBindingParseResult(templateBindings, warnings, errors) {\n      this.templateBindings = templateBindings;\n      this.warnings = warnings;\n      this.errors = errors;\n    }\n\n    return TemplateBindingParseResult;\n  }();\n\n  exports.TemplateBindingParseResult = TemplateBindingParseResult;\n\n  var Parser = function () {\n    function Parser(_lexer) {\n      this._lexer = _lexer;\n      this.errors = [];\n      this.simpleExpressionChecker = SimpleExpressionChecker;\n    }\n\n    Parser.prototype.parseAction = function (input, location, absoluteOffset, interpolationConfig) {\n      if (interpolationConfig === void 0) {\n        interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;\n      }\n\n      this._checkNoInterpolation(input, location, interpolationConfig);\n\n      var sourceToLex = this._stripComments(input);\n\n      var tokens = this._lexer.tokenize(this._stripComments(input));\n\n      var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();\n      return new ast_1.ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    };\n\n    Parser.prototype.parseBinding = function (input, location, absoluteOffset, interpolationConfig) {\n      if (interpolationConfig === void 0) {\n        interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;\n      }\n\n      var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n\n      return new ast_1.ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    };\n\n    Parser.prototype.checkSimpleExpression = function (ast) {\n      var checker = new this.simpleExpressionChecker();\n      ast.visit(checker);\n      return checker.errors;\n    };\n\n    Parser.prototype.parseSimpleBinding = function (input, location, absoluteOffset, interpolationConfig) {\n      if (interpolationConfig === void 0) {\n        interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;\n      }\n\n      var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n\n      var errors = this.checkSimpleExpression(ast);\n\n      if (errors.length > 0) {\n        this._reportError(\"Host binding expression cannot contain \" + errors.join(' '), input, location);\n      }\n\n      return new ast_1.ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    };\n\n    Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {\n      this.errors.push(new ast_1.ParserError(message, input, errLocation, ctxLocation));\n    };\n\n    Parser.prototype._parseBindingAst = function (input, location, absoluteOffset, interpolationConfig) {\n      // Quotes expressions use 3rd-party expression language. We don't want to use\n      // our lexer or parser for that, so we check for that ahead of time.\n      var quote = this._parseQuote(input, location, absoluteOffset);\n\n      if (quote != null) {\n        return quote;\n      }\n\n      this._checkNoInterpolation(input, location, interpolationConfig);\n\n      var sourceToLex = this._stripComments(input);\n\n      var tokens = this._lexer.tokenize(sourceToLex);\n\n      return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();\n    };\n\n    Parser.prototype._parseQuote = function (input, location, absoluteOffset) {\n      if (input == null) return null;\n      var prefixSeparatorIndex = input.indexOf(':');\n      if (prefixSeparatorIndex == -1) return null;\n      var prefix = input.substring(0, prefixSeparatorIndex).trim();\n      if (!lexer_1.isIdentifier(prefix)) return null;\n      var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n      var span = new ast_1.ParseSpan(0, input.length);\n      return new ast_1.Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);\n    };\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items\">\n     *         ^      ^ absoluteValueOffset for `templateValue`\n     *         absoluteKeyOffset for `templateKey`\n     * ```\n     * contains three bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     *\n     * This is apparent from the de-sugared template:\n     * ```\n     *   <ng-template ngFor let-item [ngForOf]=\"items\">\n     * ```\n     *\n     * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\n     * @param templateValue RHS of the microsyntax attribute\n     * @param templateUrl template filename if it's external, component filename if it's inline\n     * @param absoluteKeyOffset start of the `templateKey`\n     * @param absoluteValueOffset start of the `templateValue`\n     */\n\n\n    Parser.prototype.parseTemplateBindings = function (templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n      var tokens = this._lexer.tokenize(templateValue);\n\n      var parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false\n      /* parseAction */\n      , this.errors, 0\n      /* relative offset */\n      );\n      return parser.parseTemplateBindings({\n        source: templateKey,\n        span: new ast_1.AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)\n      });\n    };\n\n    Parser.prototype.parseInterpolation = function (input, location, absoluteOffset, interpolationConfig) {\n      if (interpolationConfig === void 0) {\n        interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;\n      }\n\n      var _a = this.splitInterpolation(input, location, interpolationConfig),\n          strings = _a.strings,\n          expressions = _a.expressions,\n          offsets = _a.offsets;\n\n      if (expressions.length === 0) return null;\n      var expressionNodes = [];\n\n      for (var i = 0; i < expressions.length; ++i) {\n        var expressionText = expressions[i].text;\n\n        var sourceToLex = this._stripComments(expressionText);\n\n        var tokens = this._lexer.tokenize(sourceToLex);\n\n        var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();\n        expressionNodes.push(ast);\n      }\n\n      return this.createInterpolationAst(strings.map(function (s) {\n        return s.text;\n      }), expressionNodes, input, location, absoluteOffset);\n    };\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n\n\n    Parser.prototype.parseInterpolationExpression = function (expression, location, absoluteOffset) {\n      var sourceToLex = this._stripComments(expression);\n\n      var tokens = this._lexer.tokenize(sourceToLex);\n\n      var ast = new _ParseAST(expression, location, absoluteOffset, tokens, sourceToLex.length,\n      /* parseAction */\n      false, this.errors, 0).parseChain();\n      var strings = ['', '']; // The prefix and suffix strings are both empty\n\n      return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n    };\n\n    Parser.prototype.createInterpolationAst = function (strings, expressions, input, location, absoluteOffset) {\n      var span = new ast_1.ParseSpan(0, input.length);\n      var interpolation = new ast_1.Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);\n      return new ast_1.ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n    };\n    /**\n     * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\n     * the string.\n     * Returns `null` if there are no interpolations, otherwise a\n     * `SplitInterpolation` with splits that look like\n     *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\n     */\n\n\n    Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {\n      if (interpolationConfig === void 0) {\n        interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;\n      }\n\n      var strings = [];\n      var expressions = [];\n      var offsets = [];\n      var i = 0;\n      var atInterpolation = false;\n      var extendLastString = false;\n      var interpStart = interpolationConfig.start,\n          interpEnd = interpolationConfig.end;\n\n      while (i < input.length) {\n        if (!atInterpolation) {\n          // parse until starting {{\n          var start = i;\n          i = input.indexOf(interpStart, i);\n\n          if (i === -1) {\n            i = input.length;\n          }\n\n          var text = input.substring(start, i);\n          strings.push({\n            text: text,\n            start: start,\n            end: i\n          });\n          atInterpolation = true;\n        } else {\n          // parse from starting {{ to ending }} while ignoring content inside quotes.\n          var fullStart = i;\n          var exprStart = fullStart + interpStart.length;\n\n          var exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n\n          if (exprEnd === -1) {\n            // Could not find the end of the interpolation; do not parse an expression.\n            // Instead we should extend the content on the last raw string.\n            atInterpolation = false;\n            extendLastString = true;\n            break;\n          }\n\n          var fullEnd = exprEnd + interpEnd.length;\n          var text = input.substring(exprStart, exprEnd);\n\n          if (text.trim().length === 0) {\n            this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \" + i + \" in\", location);\n          }\n\n          expressions.push({\n            text: text,\n            start: fullStart,\n            end: fullEnd\n          });\n          offsets.push(exprStart);\n          i = fullEnd;\n          atInterpolation = false;\n        }\n      }\n\n      if (!atInterpolation) {\n        // If we are now at a text section, add the remaining content as a raw string.\n        if (extendLastString) {\n          var piece = strings[strings.length - 1];\n          piece.text += input.substring(i);\n          piece.end = input.length;\n        } else {\n          strings.push({\n            text: input.substring(i),\n            start: i,\n            end: input.length\n          });\n        }\n      }\n\n      return new SplitInterpolation(strings, expressions, offsets);\n    };\n\n    Parser.prototype.wrapLiteralPrimitive = function (input, location, absoluteOffset) {\n      var span = new ast_1.ParseSpan(0, input == null ? 0 : input.length);\n      return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n    };\n\n    Parser.prototype._stripComments = function (input) {\n      var i = this._commentStart(input);\n\n      return i != null ? input.substring(0, i).trim() : input;\n    };\n\n    Parser.prototype._commentStart = function (input) {\n      var outerQuote = null;\n\n      for (var i = 0; i < input.length - 1; i++) {\n        var char = input.charCodeAt(i);\n        var nextChar = input.charCodeAt(i + 1);\n        if (char === chars.$SLASH && nextChar == chars.$SLASH && outerQuote == null) return i;\n\n        if (outerQuote === char) {\n          outerQuote = null;\n        } else if (outerQuote == null && lexer_1.isQuote(char)) {\n          outerQuote = char;\n        }\n      }\n\n      return null;\n    };\n\n    Parser.prototype._checkNoInterpolation = function (input, location, _a) {\n      var e_1, _b;\n\n      var start = _a.start,\n          end = _a.end;\n      var startIndex = -1;\n      var endIndex = -1;\n\n      try {\n        for (var _c = tslib_1.__values(this._forEachUnquotedChar(input, 0)), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var charIndex = _d.value;\n\n          if (startIndex === -1) {\n            if (input.startsWith(start)) {\n              startIndex = charIndex;\n            }\n          } else {\n            endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n\n            if (endIndex > -1) {\n              break;\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      if (startIndex > -1 && endIndex > -1) {\n        this._reportError(\"Got interpolation (\" + start + end + \") where expression was expected\", input, \"at column \" + startIndex + \" in\", location);\n      }\n    };\n    /**\n     * Finds the index of the end of an interpolation expression\n     * while ignoring comments and quoted content.\n     */\n\n\n    Parser.prototype._getInterpolationEndIndex = function (input, expressionEnd, start) {\n      var e_2, _a;\n\n      try {\n        for (var _b = tslib_1.__values(this._forEachUnquotedChar(input, start)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var charIndex = _c.value;\n\n          if (input.startsWith(expressionEnd, charIndex)) {\n            return charIndex;\n          } // Nothing else in the expression matters after we've\n          // hit a comment so look directly for the end token.\n\n\n          if (input.startsWith('//', charIndex)) {\n            return input.indexOf(expressionEnd, charIndex);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      return -1;\n    };\n    /**\n     * Generator used to iterate over the character indexes of a string that are outside of quotes.\n     * @param input String to loop through.\n     * @param start Index within the string at which to start.\n     */\n\n\n    Parser.prototype._forEachUnquotedChar = function (input, start) {\n      var currentQuote, escapeCount, i, char;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            currentQuote = null;\n            escapeCount = 0;\n            i = start;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < input.length)) return [3\n            /*break*/\n            , 6];\n            char = input[i];\n            if (!(lexer_1.isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0)) return [3\n            /*break*/\n            , 2];\n            currentQuote = currentQuote === null ? char : null;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            if (!(currentQuote === null)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , i];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n            _a.label = 5;\n\n          case 5:\n            i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    };\n\n    return Parser;\n  }();\n\n  exports.Parser = Parser;\n\n  var IvyParser = function (_super) {\n    tslib_1.__extends(IvyParser, _super);\n\n    function IvyParser() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.simpleExpressionChecker = IvySimpleExpressionChecker;\n      return _this;\n    }\n\n    return IvyParser;\n  }(Parser);\n\n  exports.IvyParser = IvyParser;\n  /** Describes a stateful context an expression parser is in. */\n\n  var ParseContextFlags;\n\n  (function (ParseContextFlags) {\n    ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n    /**\n     * A Writable context is one in which a value may be written to an lvalue.\n     * For example, after we see a property access, we may expect a write to the\n     * property via the \"=\" operator.\n     *   prop\n     *        ^ possible \"=\" after\n     */\n\n    ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n  })(ParseContextFlags || (ParseContextFlags = {}));\n\n  var _ParseAST = function () {\n    function _ParseAST(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {\n      this.input = input;\n      this.location = location;\n      this.absoluteOffset = absoluteOffset;\n      this.tokens = tokens;\n      this.inputLength = inputLength;\n      this.parseAction = parseAction;\n      this.errors = errors;\n      this.offset = offset;\n      this.rparensExpected = 0;\n      this.rbracketsExpected = 0;\n      this.rbracesExpected = 0;\n      this.context = ParseContextFlags.None; // Cache of expression start and input indeces to the absolute source span they map to, used to\n      // prevent creating superfluous source spans in `sourceSpan`.\n      // A serial of the expression start and input index is used for mapping because both are stateful\n      // and may change for subsequent expressions visited by the parser.\n\n      this.sourceSpanCache = new Map();\n      this.index = 0;\n    }\n\n    _ParseAST.prototype.peek = function (offset) {\n      var i = this.index + offset;\n      return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;\n    };\n\n    Object.defineProperty(_ParseAST.prototype, \"next\", {\n      get: function () {\n        return this.peek(0);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(_ParseAST.prototype, \"atEOF\", {\n      /** Whether all the parser input has been processed. */\n      get: function () {\n        return this.index >= this.tokens.length;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(_ParseAST.prototype, \"inputIndex\", {\n      /**\n       * Index of the next token to be processed, or the end of the last token if all have been\n       * processed.\n       */\n      get: function () {\n        return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(_ParseAST.prototype, \"currentEndIndex\", {\n      /**\n       * End index of the last processed token, or the start of the first token if none have been\n       * processed.\n       */\n      get: function () {\n        if (this.index > 0) {\n          var curToken = this.peek(-1);\n          return curToken.end + this.offset;\n        } // No tokens have been processed yet; return the next token's start or the length of the input\n        // if there is no token.\n\n\n        if (this.tokens.length === 0) {\n          return this.inputLength + this.offset;\n        }\n\n        return this.next.index + this.offset;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(_ParseAST.prototype, \"currentAbsoluteOffset\", {\n      /**\n       * Returns the absolute offset of the start of the current token.\n       */\n      get: function () {\n        return this.absoluteOffset + this.inputIndex;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\n     * provided).\n     *\n     * @param start Position from which the `ParseSpan` will start.\n     * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\n     *     natural ending index)\n     */\n\n    _ParseAST.prototype.span = function (start, artificialEndIndex) {\n      var endIndex = this.currentEndIndex;\n\n      if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n        endIndex = artificialEndIndex;\n      } // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n      // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n      // appears to be a deep-seated parser bug.\n      //\n      // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n      // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n\n\n      if (start > endIndex) {\n        var tmp = endIndex;\n        endIndex = start;\n        start = tmp;\n      }\n\n      return new ast_1.ParseSpan(start, endIndex);\n    };\n\n    _ParseAST.prototype.sourceSpan = function (start, artificialEndIndex) {\n      var serial = start + \"@\" + this.inputIndex + \":\" + artificialEndIndex;\n\n      if (!this.sourceSpanCache.has(serial)) {\n        this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n      }\n\n      return this.sourceSpanCache.get(serial);\n    };\n\n    _ParseAST.prototype.advance = function () {\n      this.index++;\n    };\n    /**\n     * Executes a callback in the provided context.\n     */\n\n\n    _ParseAST.prototype.withContext = function (context, cb) {\n      this.context |= context;\n      var ret = cb();\n      this.context ^= context;\n      return ret;\n    };\n\n    _ParseAST.prototype.consumeOptionalCharacter = function (code) {\n      if (this.next.isCharacter(code)) {\n        this.advance();\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    _ParseAST.prototype.peekKeywordLet = function () {\n      return this.next.isKeywordLet();\n    };\n\n    _ParseAST.prototype.peekKeywordAs = function () {\n      return this.next.isKeywordAs();\n    };\n    /**\n     * Consumes an expected character, otherwise emits an error about the missing expected character\n     * and skips over the token stream until reaching a recoverable point.\n     *\n     * See `this.error` and `this.skip` for more details.\n     */\n\n\n    _ParseAST.prototype.expectCharacter = function (code) {\n      if (this.consumeOptionalCharacter(code)) return;\n      this.error(\"Missing expected \" + String.fromCharCode(code));\n    };\n\n    _ParseAST.prototype.consumeOptionalOperator = function (op) {\n      if (this.next.isOperator(op)) {\n        this.advance();\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    _ParseAST.prototype.expectOperator = function (operator) {\n      if (this.consumeOptionalOperator(operator)) return;\n      this.error(\"Missing expected operator \" + operator);\n    };\n\n    _ParseAST.prototype.prettyPrintToken = function (tok) {\n      return tok === lexer_1.EOF ? 'end of input' : \"token \" + tok;\n    };\n\n    _ParseAST.prototype.expectIdentifierOrKeyword = function () {\n      var n = this.next;\n\n      if (!n.isIdentifier() && !n.isKeyword()) {\n        if (n.isPrivateIdentifier()) {\n          this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n        } else {\n          this.error(\"Unexpected \" + this.prettyPrintToken(n) + \", expected identifier or keyword\");\n        }\n\n        return null;\n      }\n\n      this.advance();\n      return n.toString();\n    };\n\n    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {\n      var n = this.next;\n\n      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n        if (n.isPrivateIdentifier()) {\n          this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n        } else {\n          this.error(\"Unexpected \" + this.prettyPrintToken(n) + \", expected identifier, keyword, or string\");\n        }\n\n        return '';\n      }\n\n      this.advance();\n      return n.toString();\n    };\n\n    _ParseAST.prototype.parseChain = function () {\n      var exprs = [];\n      var start = this.inputIndex;\n\n      while (this.index < this.tokens.length) {\n        var expr = this.parsePipe();\n        exprs.push(expr);\n\n        if (this.consumeOptionalCharacter(chars.$SEMICOLON)) {\n          if (!this.parseAction) {\n            this.error('Binding expression cannot contain chained expression');\n          }\n\n          while (this.consumeOptionalCharacter(chars.$SEMICOLON)) {} // read all semicolons\n\n        } else if (this.index < this.tokens.length) {\n          this.error(\"Unexpected token '\" + this.next + \"'\");\n        }\n      }\n\n      if (exprs.length == 0) {\n        // We have no expressions so create an empty expression that spans the entire input length\n        var artificialStart = this.offset;\n        var artificialEnd = this.offset + this.inputLength;\n        return new ast_1.EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n      }\n\n      if (exprs.length == 1) return exprs[0];\n      return new ast_1.Chain(this.span(start), this.sourceSpan(start), exprs);\n    };\n\n    _ParseAST.prototype.parsePipe = function () {\n      var start = this.inputIndex;\n      var result = this.parseExpression();\n\n      if (this.consumeOptionalOperator('|')) {\n        if (this.parseAction) {\n          this.error('Cannot have a pipe in an action expression');\n        }\n\n        do {\n          var nameStart = this.inputIndex;\n          var nameId = this.expectIdentifierOrKeyword();\n          var nameSpan = void 0;\n          var fullSpanEnd = undefined;\n\n          if (nameId !== null) {\n            nameSpan = this.sourceSpan(nameStart);\n          } else {\n            // No valid identifier was found, so we'll assume an empty pipe name ('').\n            nameId = ''; // However, there may have been whitespace present between the pipe character and the next\n            // token in the sequence (or the end of input). We want to track this whitespace so that\n            // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n            // whitespace beyond it. Another way of thinking about this is that the zero-length name\n            // is assumed to be at the end of any whitespace beyond the pipe character.\n            //\n            // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n            // beginning of the next token, or until the end of input if the next token is EOF.\n\n            fullSpanEnd = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset; // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n            // beyond the pipe character.\n\n            nameSpan = new ast_1.ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n          }\n\n          var args = [];\n\n          while (this.consumeOptionalCharacter(chars.$COLON)) {\n            args.push(this.parseExpression()); // If there are additional expressions beyond the name, then the artificial end for the\n            // name is no longer relevant.\n          }\n\n          result = new ast_1.BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n        } while (this.consumeOptionalOperator('|'));\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseExpression = function () {\n      return this.parseConditional();\n    };\n\n    _ParseAST.prototype.parseConditional = function () {\n      var start = this.inputIndex;\n      var result = this.parseLogicalOr();\n\n      if (this.consumeOptionalOperator('?')) {\n        var yes = this.parsePipe();\n        var no = void 0;\n\n        if (!this.consumeOptionalCharacter(chars.$COLON)) {\n          var end = this.inputIndex;\n          var expression = this.input.substring(start, end);\n          this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n          no = new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n        } else {\n          no = this.parsePipe();\n        }\n\n        return new ast_1.Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n      } else {\n        return result;\n      }\n    };\n\n    _ParseAST.prototype.parseLogicalOr = function () {\n      // '||'\n      var start = this.inputIndex;\n      var result = this.parseLogicalAnd();\n\n      while (this.consumeOptionalOperator('||')) {\n        var right = this.parseLogicalAnd();\n        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseLogicalAnd = function () {\n      // '&&'\n      var start = this.inputIndex;\n      var result = this.parseNullishCoalescing();\n\n      while (this.consumeOptionalOperator('&&')) {\n        var right = this.parseNullishCoalescing();\n        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseNullishCoalescing = function () {\n      // '??'\n      var start = this.inputIndex;\n      var result = this.parseEquality();\n\n      while (this.consumeOptionalOperator('??')) {\n        var right = this.parseEquality();\n        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseEquality = function () {\n      // '==','!=','===','!=='\n      var start = this.inputIndex;\n      var result = this.parseRelational();\n\n      while (this.next.type == lexer_1.TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '==':\n          case '===':\n          case '!=':\n          case '!==':\n            this.advance();\n            var right = this.parseRelational();\n            result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseRelational = function () {\n      // '<', '>', '<=', '>='\n      var start = this.inputIndex;\n      var result = this.parseAdditive();\n\n      while (this.next.type == lexer_1.TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '<':\n          case '>':\n          case '<=':\n          case '>=':\n            this.advance();\n            var right = this.parseAdditive();\n            result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseAdditive = function () {\n      // '+', '-'\n      var start = this.inputIndex;\n      var result = this.parseMultiplicative();\n\n      while (this.next.type == lexer_1.TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '+':\n          case '-':\n            this.advance();\n            var right = this.parseMultiplicative();\n            result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseMultiplicative = function () {\n      // '*', '%', '/'\n      var start = this.inputIndex;\n      var result = this.parsePrefix();\n\n      while (this.next.type == lexer_1.TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '*':\n          case '%':\n          case '/':\n            this.advance();\n            var right = this.parsePrefix();\n            result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    };\n\n    _ParseAST.prototype.parsePrefix = function () {\n      if (this.next.type == lexer_1.TokenType.Operator) {\n        var start = this.inputIndex;\n        var operator = this.next.strValue;\n        var result = void 0;\n\n        switch (operator) {\n          case '+':\n            this.advance();\n            result = this.parsePrefix();\n            return ast_1.Unary.createPlus(this.span(start), this.sourceSpan(start), result);\n\n          case '-':\n            this.advance();\n            result = this.parsePrefix();\n            return ast_1.Unary.createMinus(this.span(start), this.sourceSpan(start), result);\n\n          case '!':\n            this.advance();\n            result = this.parsePrefix();\n            return new ast_1.PrefixNot(this.span(start), this.sourceSpan(start), result);\n        }\n      }\n\n      return this.parseCallChain();\n    };\n\n    _ParseAST.prototype.parseCallChain = function () {\n      var start = this.inputIndex;\n      var result = this.parsePrimary();\n\n      while (true) {\n        if (this.consumeOptionalCharacter(chars.$PERIOD)) {\n          result = this.parseAccessMemberOrMethodCall(result, start, false);\n        } else if (this.consumeOptionalOperator('?.')) {\n          result = this.consumeOptionalCharacter(chars.$LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMemberOrMethodCall(result, start, true);\n        } else if (this.consumeOptionalCharacter(chars.$LBRACKET)) {\n          result = this.parseKeyedReadOrWrite(result, start, false);\n        } else if (this.consumeOptionalCharacter(chars.$LPAREN)) {\n          this.rparensExpected++;\n          var args = this.parseCallArguments();\n          this.rparensExpected--;\n          this.expectCharacter(chars.$RPAREN);\n          result = new ast_1.FunctionCall(this.span(start), this.sourceSpan(start), result, args);\n        } else if (this.consumeOptionalOperator('!')) {\n          result = new ast_1.NonNullAssert(this.span(start), this.sourceSpan(start), result);\n        } else {\n          return result;\n        }\n      }\n    };\n\n    _ParseAST.prototype.parsePrimary = function () {\n      var start = this.inputIndex;\n\n      if (this.consumeOptionalCharacter(chars.$LPAREN)) {\n        this.rparensExpected++;\n        var result = this.parsePipe();\n        this.rparensExpected--;\n        this.expectCharacter(chars.$RPAREN);\n        return result;\n      } else if (this.next.isKeywordNull()) {\n        this.advance();\n        return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n      } else if (this.next.isKeywordUndefined()) {\n        this.advance();\n        return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n      } else if (this.next.isKeywordTrue()) {\n        this.advance();\n        return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n      } else if (this.next.isKeywordFalse()) {\n        this.advance();\n        return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n      } else if (this.next.isKeywordThis()) {\n        this.advance();\n        return new ast_1.ThisReceiver(this.span(start), this.sourceSpan(start));\n      } else if (this.consumeOptionalCharacter(chars.$LBRACKET)) {\n        this.rbracketsExpected++;\n        var elements = this.parseExpressionList(chars.$RBRACKET);\n        this.rbracketsExpected--;\n        this.expectCharacter(chars.$RBRACKET);\n        return new ast_1.LiteralArray(this.span(start), this.sourceSpan(start), elements);\n      } else if (this.next.isCharacter(chars.$LBRACE)) {\n        return this.parseLiteralMap();\n      } else if (this.next.isIdentifier()) {\n        return this.parseAccessMemberOrMethodCall(new ast_1.ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n      } else if (this.next.isNumber()) {\n        var value = this.next.toNumber();\n        this.advance();\n        return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n      } else if (this.next.isString()) {\n        var literalValue = this.next.toString();\n        this.advance();\n        return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n      } else if (this.next.isPrivateIdentifier()) {\n        this._reportErrorForPrivateIdentifier(this.next, null);\n\n        return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n      } else if (this.index >= this.tokens.length) {\n        this.error(\"Unexpected end of expression: \" + this.input);\n        return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n      } else {\n        this.error(\"Unexpected token \" + this.next);\n        return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n      }\n    };\n\n    _ParseAST.prototype.parseExpressionList = function (terminator) {\n      var result = [];\n\n      do {\n        if (!this.next.isCharacter(terminator)) {\n          result.push(this.parsePipe());\n        } else {\n          break;\n        }\n      } while (this.consumeOptionalCharacter(chars.$COMMA));\n\n      return result;\n    };\n\n    _ParseAST.prototype.parseLiteralMap = function () {\n      var keys = [];\n      var values = [];\n      var start = this.inputIndex;\n      this.expectCharacter(chars.$LBRACE);\n\n      if (!this.consumeOptionalCharacter(chars.$RBRACE)) {\n        this.rbracesExpected++;\n\n        do {\n          var keyStart = this.inputIndex;\n          var quoted = this.next.isString();\n          var key = this.expectIdentifierOrKeywordOrString();\n          keys.push({\n            key: key,\n            quoted: quoted\n          }); // Properties with quoted keys can't use the shorthand syntax.\n\n          if (quoted) {\n            this.expectCharacter(chars.$COLON);\n            values.push(this.parsePipe());\n          } else if (this.consumeOptionalCharacter(chars.$COLON)) {\n            values.push(this.parsePipe());\n          } else {\n            var span = this.span(keyStart);\n            var sourceSpan = this.sourceSpan(keyStart);\n            values.push(new ast_1.PropertyRead(span, sourceSpan, sourceSpan, new ast_1.ImplicitReceiver(span, sourceSpan), key));\n          }\n        } while (this.consumeOptionalCharacter(chars.$COMMA));\n\n        this.rbracesExpected--;\n        this.expectCharacter(chars.$RBRACE);\n      }\n\n      return new ast_1.LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n    };\n\n    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, start, isSafe) {\n      var _this = this;\n\n      var nameStart = this.inputIndex;\n      var id = this.withContext(ParseContextFlags.Writable, function () {\n        var _a;\n\n        var id = (_a = _this.expectIdentifierOrKeyword()) !== null && _a !== void 0 ? _a : '';\n\n        if (id.length === 0) {\n          _this.error(\"Expected identifier for property access\", receiver.span.end);\n        }\n\n        return id;\n      });\n      var nameSpan = this.sourceSpan(nameStart);\n\n      if (this.consumeOptionalCharacter(chars.$LPAREN)) {\n        var argumentStart = this.inputIndex;\n        this.rparensExpected++;\n        var args = this.parseCallArguments();\n        var argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n        this.expectCharacter(chars.$RPAREN);\n        this.rparensExpected--;\n        var span = this.span(start);\n        var sourceSpan = this.sourceSpan(start);\n        return isSafe ? new ast_1.SafeMethodCall(span, sourceSpan, nameSpan, receiver, id, args, argumentSpan) : new ast_1.MethodCall(span, sourceSpan, nameSpan, receiver, id, args, argumentSpan);\n      } else {\n        if (isSafe) {\n          if (this.consumeOptionalOperator('=')) {\n            this.error('The \\'?.\\' operator cannot be used in the assignment');\n            return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n          } else {\n            return new ast_1.SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);\n          }\n        } else {\n          if (this.consumeOptionalOperator('=')) {\n            if (!this.parseAction) {\n              this.error('Bindings cannot contain assignments');\n              return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n            }\n\n            var value = this.parseConditional();\n            return new ast_1.PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, receiver, id, value);\n          } else {\n            return new ast_1.PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);\n          }\n        }\n      }\n    };\n\n    _ParseAST.prototype.parseCallArguments = function () {\n      if (this.next.isCharacter(chars.$RPAREN)) return [];\n      var positionals = [];\n\n      do {\n        positionals.push(this.parsePipe());\n      } while (this.consumeOptionalCharacter(chars.$COMMA));\n\n      return positionals;\n    };\n    /**\n     * Parses an identifier, a keyword, a string with an optional `-` in between,\n     * and returns the string along with its absolute source span.\n     */\n\n\n    _ParseAST.prototype.expectTemplateBindingKey = function () {\n      var result = '';\n      var operatorFound = false;\n      var start = this.currentAbsoluteOffset;\n\n      do {\n        result += this.expectIdentifierOrKeywordOrString();\n        operatorFound = this.consumeOptionalOperator('-');\n\n        if (operatorFound) {\n          result += '-';\n        }\n      } while (operatorFound);\n\n      return {\n        source: result,\n        span: new ast_1.AbsoluteSourceSpan(start, start + result.length)\n      };\n    };\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\n     * ```\n     * contains five bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     * 4. i -> NgForOfContext.index\n     * 5. ngForTrackBy -> func\n     *\n     * For a full description of the microsyntax grammar, see\n     * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n     *\n     * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\n     * without the *, along with its absolute span.\n     */\n\n\n    _ParseAST.prototype.parseTemplateBindings = function (templateKey) {\n      var bindings = []; // The first binding is for the template key itself\n      // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n      // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n\n      bindings.push.apply(bindings, tslib_1.__spreadArray([], tslib_1.__read(this.parseDirectiveKeywordBindings(templateKey))));\n\n      while (this.index < this.tokens.length) {\n        // If it starts with 'let', then this must be variable declaration\n        var letBinding = this.parseLetBinding();\n\n        if (letBinding) {\n          bindings.push(letBinding);\n        } else {\n          // Two possible cases here, either `value \"as\" key` or\n          // \"directive-keyword expression\". We don't know which case, but both\n          // \"value\" and \"directive-keyword\" are template binding key, so consume\n          // the key first.\n          var key = this.expectTemplateBindingKey(); // Peek at the next token, if it is \"as\" then this must be variable\n          // declaration.\n\n          var binding = this.parseAsBinding(key);\n\n          if (binding) {\n            bindings.push(binding);\n          } else {\n            // Otherwise the key must be a directive keyword, like \"of\". Transform\n            // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n            key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n            bindings.push.apply(bindings, tslib_1.__spreadArray([], tslib_1.__read(this.parseDirectiveKeywordBindings(key))));\n          }\n        }\n\n        this.consumeStatementTerminator();\n      }\n\n      return new TemplateBindingParseResult(bindings, []\n      /* warnings */\n      , this.errors);\n    };\n\n    _ParseAST.prototype.parseKeyedReadOrWrite = function (receiver, start, isSafe) {\n      var _this = this;\n\n      return this.withContext(ParseContextFlags.Writable, function () {\n        _this.rbracketsExpected++;\n\n        var key = _this.parsePipe();\n\n        if (key instanceof ast_1.EmptyExpr) {\n          _this.error(\"Key access cannot be empty\");\n        }\n\n        _this.rbracketsExpected--;\n\n        _this.expectCharacter(chars.$RBRACKET);\n\n        if (_this.consumeOptionalOperator('=')) {\n          if (isSafe) {\n            _this.error('The \\'?.\\' operator cannot be used in the assignment');\n          } else {\n            var value = _this.parseConditional();\n\n            return new ast_1.KeyedWrite(_this.span(start), _this.sourceSpan(start), receiver, key, value);\n          }\n        } else {\n          return isSafe ? new ast_1.SafeKeyedRead(_this.span(start), _this.sourceSpan(start), receiver, key) : new ast_1.KeyedRead(_this.span(start), _this.sourceSpan(start), receiver, key);\n        }\n\n        return new ast_1.EmptyExpr(_this.span(start), _this.sourceSpan(start));\n      });\n    };\n    /**\n     * Parse a directive keyword, followed by a mandatory expression.\n     * For example, \"of items\", \"trackBy: func\".\n     * The bindings are: ngForOf -> items, ngForTrackBy -> func\n     * There could be an optional \"as\" binding that follows the expression.\n     * For example,\n     * ```\n     *   *ngFor=\"let item of items | slice:0:1 as collection\".\n     *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\n     *               keyword    bound target   optional 'as' binding\n     * ```\n     *\n     * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\n     * absolute span.\n     */\n\n\n    _ParseAST.prototype.parseDirectiveKeywordBindings = function (key) {\n      var bindings = [];\n      this.consumeOptionalCharacter(chars.$COLON); // trackBy: trackByFunction\n\n      var value = this.getDirectiveBoundTarget();\n      var spanEnd = this.currentAbsoluteOffset; // The binding could optionally be followed by \"as\". For example,\n      // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n      // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n      // 'key' in the current context now becomes the \"value\" in the next binding.\n\n      var asBinding = this.parseAsBinding(key);\n\n      if (!asBinding) {\n        this.consumeStatementTerminator();\n        spanEnd = this.currentAbsoluteOffset;\n      }\n\n      var sourceSpan = new ast_1.AbsoluteSourceSpan(key.span.start, spanEnd);\n      bindings.push(new ast_1.ExpressionBinding(sourceSpan, key, value));\n\n      if (asBinding) {\n        bindings.push(asBinding);\n      }\n\n      return bindings;\n    };\n    /**\n     * Return the expression AST for the bound target of a directive keyword\n     * binding. For example,\n     * ```\n     *   *ngIf=\"condition | pipe\"\n     *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\n     *   *ngFor=\"let item of items\"\n     *                       ^^^^^ bound target for \"ngForOf\"\n     * ```\n     */\n\n\n    _ParseAST.prototype.getDirectiveBoundTarget = function () {\n      if (this.next === lexer_1.EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n        return null;\n      }\n\n      var ast = this.parsePipe(); // example: \"condition | async\"\n\n      var _a = ast.span,\n          start = _a.start,\n          end = _a.end;\n      var value = this.input.substring(start, end);\n      return new ast_1.ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n    };\n    /**\n     * Return the binding for a variable declared using `as`. Note that the order\n     * of the key-value pair in this declaration is reversed. For example,\n     * ```\n     *   *ngFor=\"let item of items; index as i\"\n     *                              ^^^^^    ^\n     *                              value    key\n     * ```\n     *\n     * @param value name of the value in the declaration, \"ngIf\" in the example\n     * above, along with its absolute span.\n     */\n\n\n    _ParseAST.prototype.parseAsBinding = function (value) {\n      if (!this.peekKeywordAs()) {\n        return null;\n      }\n\n      this.advance(); // consume the 'as' keyword\n\n      var key = this.expectTemplateBindingKey();\n      this.consumeStatementTerminator();\n      var sourceSpan = new ast_1.AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n      return new ast_1.VariableBinding(sourceSpan, key, value);\n    };\n    /**\n     * Return the binding for a variable declared using `let`. For example,\n     * ```\n     *   *ngFor=\"let item of items; let i=index;\"\n     *           ^^^^^^^^           ^^^^^^^^^^^\n     * ```\n     * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\n     * In the second binding, `i` is bound to `NgForOfContext.index`.\n     */\n\n\n    _ParseAST.prototype.parseLetBinding = function () {\n      if (!this.peekKeywordLet()) {\n        return null;\n      }\n\n      var spanStart = this.currentAbsoluteOffset;\n      this.advance(); // consume the 'let' keyword\n\n      var key = this.expectTemplateBindingKey();\n      var value = null;\n\n      if (this.consumeOptionalOperator('=')) {\n        value = this.expectTemplateBindingKey();\n      }\n\n      this.consumeStatementTerminator();\n      var sourceSpan = new ast_1.AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n      return new ast_1.VariableBinding(sourceSpan, key, value);\n    };\n    /**\n     * Consume the optional statement terminator: semicolon or comma.\n     */\n\n\n    _ParseAST.prototype.consumeStatementTerminator = function () {\n      this.consumeOptionalCharacter(chars.$SEMICOLON) || this.consumeOptionalCharacter(chars.$COMMA);\n    };\n    /**\n     * Records an error and skips over the token stream until reaching a recoverable point. See\n     * `this.skip` for more details on token skipping.\n     */\n\n\n    _ParseAST.prototype.error = function (message, index) {\n      if (index === void 0) {\n        index = null;\n      }\n\n      this.errors.push(new ast_1.ParserError(message, this.input, this.locationText(index), this.location));\n      this.skip();\n    };\n\n    _ParseAST.prototype.locationText = function (index) {\n      if (index === void 0) {\n        index = null;\n      }\n\n      if (index == null) index = this.index;\n      return index < this.tokens.length ? \"at column \" + (this.tokens[index].index + 1) + \" in\" : \"at the end of the expression\";\n    };\n    /**\n     * Records an error for an unexpected private identifier being discovered.\n     * @param token Token representing a private identifier.\n     * @param extraMessage Optional additional message being appended to the error.\n     */\n\n\n    _ParseAST.prototype._reportErrorForPrivateIdentifier = function (token, extraMessage) {\n      var errorMessage = \"Private identifiers are not supported. Unexpected private identifier: \" + token;\n\n      if (extraMessage !== null) {\n        errorMessage += \", \" + extraMessage;\n      }\n\n      this.error(errorMessage);\n    };\n    /**\n     * Error recovery should skip tokens until it encounters a recovery point.\n     *\n     * The following are treated as unconditional recovery points:\n     *   - end of input\n     *   - ';' (parseChain() is always the root production, and it expects a ';')\n     *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\n     *\n     * The following are conditional recovery points:\n     *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\n     *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\n     *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\n     *       an '(' <expr> ')' production).\n     *       The recovery points of grouping symbols must be conditional as they must be skipped if\n     *       none of the calling productions are not expecting the closing token else we will never\n     *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\n     *       That is, we skip a closing symbol if we are not in a grouping production.\n     *   - '=' in a `Writable` context\n     *     - In this context, we are able to recover after seeing the `=` operator, which\n     *       signals the presence of an independent rvalue expression following the `=` operator.\n     *\n     * If a production expects one of these token it increments the corresponding nesting count,\n     * and then decrements it just prior to checking if the token is in the input.\n     */\n\n\n    _ParseAST.prototype.skip = function () {\n      var n = this.next;\n\n      while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) && !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n        if (this.next.isError()) {\n          this.errors.push(new ast_1.ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n        }\n\n        this.advance();\n        n = this.next;\n      }\n    };\n\n    return _ParseAST;\n  }();\n\n  exports._ParseAST = _ParseAST;\n\n  var SimpleExpressionChecker = function () {\n    function SimpleExpressionChecker() {\n      this.errors = [];\n    }\n\n    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitThisReceiver = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) {\n      this.visitAll(ast.expressions, context);\n    };\n\n    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) {\n      this.visitAll(ast.values, context);\n    };\n\n    SimpleExpressionChecker.prototype.visitUnary = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitBinary = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitNonNullAssert = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitConditional = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitPipe = function (ast, context) {\n      this.errors.push('pipes');\n    };\n\n    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitAll = function (asts, context) {\n      var _this = this;\n\n      return asts.map(function (node) {\n        return node.visit(_this, context);\n      });\n    };\n\n    SimpleExpressionChecker.prototype.visitChain = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitQuote = function (ast, context) {};\n\n    SimpleExpressionChecker.prototype.visitSafeKeyedRead = function (ast, context) {};\n\n    return SimpleExpressionChecker;\n  }();\n  /**\n   * This class implements SimpleExpressionChecker used in View Engine and performs more strict checks\n   * to make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is\n   * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at\n   * compile time. In order to preserve View Engine behavior, more strict checks are introduced for\n   * Ivy mode only.\n   */\n\n\n  var IvySimpleExpressionChecker = function (_super) {\n    tslib_1.__extends(IvySimpleExpressionChecker, _super);\n\n    function IvySimpleExpressionChecker() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.errors = [];\n      return _this;\n    }\n\n    IvySimpleExpressionChecker.prototype.visitPipe = function () {\n      this.errors.push('pipes');\n    };\n\n    return IvySimpleExpressionChecker;\n  }(ast_1.RecursiveAstVisitor);\n}); //# sourceMappingURL=data:application/json;base64,","map":{"version":3,"sources":["c:/Users/perra/Documents/projects/ngx-reactive-loading/node_modules/@angular/compiler/src/expression_parser/parser.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","_ParseAST","IvyParser","Parser","TemplateBindingParseResult","SplitInterpolation","tslib_1","chars","interpolation_config_1","ast_1","lexer_1","strings","expressions","offsets","templateBindings","warnings","errors","_lexer","simpleExpressionChecker","SimpleExpressionChecker","prototype","parseAction","input","location","absoluteOffset","interpolationConfig","DEFAULT_INTERPOLATION_CONFIG","_checkNoInterpolation","sourceToLex","_stripComments","tokens","tokenize","ast","length","parseChain","ASTWithSource","parseBinding","_parseBindingAst","checkSimpleExpression","checker","visit","parseSimpleBinding","_reportError","join","message","errLocation","ctxLocation","push","ParserError","quote","_parseQuote","prefixSeparatorIndex","indexOf","prefix","substring","trim","isIdentifier","uninterpretedExpression","span","ParseSpan","Quote","toAbsolute","parseTemplateBindings","templateKey","templateValue","templateUrl","absoluteKeyOffset","absoluteValueOffset","parser","source","AbsoluteSourceSpan","parseInterpolation","_a","splitInterpolation","expressionNodes","i","expressionText","text","createInterpolationAst","map","s","parseInterpolationExpression","expression","interpolation","Interpolation","atInterpolation","extendLastString","interpStart","start","interpEnd","end","fullStart","exprStart","exprEnd","_getInterpolationEndIndex","fullEnd","piece","wrapLiteralPrimitive","LiteralPrimitive","_commentStart","outerQuote","char","charCodeAt","nextChar","$SLASH","isQuote","e_1","_b","startIndex","endIndex","_c","__values","_forEachUnquotedChar","_d","next","done","charIndex","startsWith","e_1_1","error","return","call","expressionEnd","e_2","e_2_1","currentQuote","escapeCount","__generator","label","sent","_super","__extends","_this","apply","arguments","IvySimpleExpressionChecker","ParseContextFlags","inputLength","offset","rparensExpected","rbracketsExpected","rbracesExpected","context","None","sourceSpanCache","Map","index","peek","EOF","get","enumerable","configurable","atEOF","currentEndIndex","curToken","inputIndex","artificialEndIndex","tmp","sourceSpan","serial","has","set","advance","withContext","cb","ret","consumeOptionalCharacter","code","isCharacter","peekKeywordLet","isKeywordLet","peekKeywordAs","isKeywordAs","expectCharacter","String","fromCharCode","consumeOptionalOperator","op","isOperator","expectOperator","operator","prettyPrintToken","tok","expectIdentifierOrKeyword","n","isKeyword","isPrivateIdentifier","_reportErrorForPrivateIdentifier","toString","expectIdentifierOrKeywordOrString","isString","exprs","expr","parsePipe","$SEMICOLON","artificialStart","artificialEnd","EmptyExpr","Chain","result","parseExpression","nameStart","nameId","nameSpan","fullSpanEnd","args","$COLON","BindingPipe","parseConditional","parseLogicalOr","yes","no","Conditional","parseLogicalAnd","right","Binary","parseNullishCoalescing","parseEquality","parseRelational","type","TokenType","Operator","strValue","parseAdditive","parseMultiplicative","parsePrefix","Unary","createPlus","createMinus","PrefixNot","parseCallChain","parsePrimary","$PERIOD","parseAccessMemberOrMethodCall","$LBRACKET","parseKeyedReadOrWrite","$LPAREN","parseCallArguments","$RPAREN","FunctionCall","NonNullAssert","isKeywordNull","isKeywordUndefined","isKeywordTrue","isKeywordFalse","isKeywordThis","ThisReceiver","elements","parseExpressionList","$RBRACKET","LiteralArray","$LBRACE","parseLiteralMap","ImplicitReceiver","isNumber","toNumber","literalValue","terminator","$COMMA","keys","values","$RBRACE","keyStart","quoted","key","PropertyRead","LiteralMap","receiver","isSafe","id","Writable","argumentStart","argumentSpan","SafeMethodCall","MethodCall","SafePropertyRead","PropertyWrite","positionals","expectTemplateBindingKey","operatorFound","currentAbsoluteOffset","bindings","__spreadArray","__read","parseDirectiveKeywordBindings","letBinding","parseLetBinding","binding","parseAsBinding","charAt","toUpperCase","consumeStatementTerminator","KeyedWrite","SafeKeyedRead","KeyedRead","getDirectiveBoundTarget","spanEnd","asBinding","ExpressionBinding","VariableBinding","spanStart","locationText","skip","token","extraMessage","errorMessage","isError","visitImplicitReceiver","visitThisReceiver","visitInterpolation","visitLiteralPrimitive","visitPropertyRead","visitPropertyWrite","visitSafePropertyRead","visitMethodCall","visitSafeMethodCall","visitFunctionCall","visitLiteralArray","visitAll","visitLiteralMap","visitUnary","visitBinary","visitPrefixNot","visitNonNullAssert","visitConditional","visitPipe","visitKeyedRead","visitKeyedWrite","asts","node","visitChain","visitQuote","visitSafeKeyedRead","RecursiveAstVisitor"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define(\"@angular/compiler/src/expression_parser/parser\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/chars\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/expression_parser/ast\", \"@angular/compiler/src/expression_parser/lexer\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports._ParseAST = exports.IvyParser = exports.Parser = exports.TemplateBindingParseResult = exports.SplitInterpolation = void 0;\n    var tslib_1 = require(\"tslib\");\n    var chars = require(\"@angular/compiler/src/chars\");\n    var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n    var ast_1 = require(\"@angular/compiler/src/expression_parser/ast\");\n    var lexer_1 = require(\"@angular/compiler/src/expression_parser/lexer\");\n    var SplitInterpolation = /** @class */ (function () {\n        function SplitInterpolation(strings, expressions, offsets) {\n            this.strings = strings;\n            this.expressions = expressions;\n            this.offsets = offsets;\n        }\n        return SplitInterpolation;\n    }());\n    exports.SplitInterpolation = SplitInterpolation;\n    var TemplateBindingParseResult = /** @class */ (function () {\n        function TemplateBindingParseResult(templateBindings, warnings, errors) {\n            this.templateBindings = templateBindings;\n            this.warnings = warnings;\n            this.errors = errors;\n        }\n        return TemplateBindingParseResult;\n    }());\n    exports.TemplateBindingParseResult = TemplateBindingParseResult;\n    var Parser = /** @class */ (function () {\n        function Parser(_lexer) {\n            this._lexer = _lexer;\n            this.errors = [];\n            this.simpleExpressionChecker = SimpleExpressionChecker;\n        }\n        Parser.prototype.parseAction = function (input, location, absoluteOffset, interpolationConfig) {\n            if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }\n            this._checkNoInterpolation(input, location, interpolationConfig);\n            var sourceToLex = this._stripComments(input);\n            var tokens = this._lexer.tokenize(this._stripComments(input));\n            var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\n                .parseChain();\n            return new ast_1.ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n        };\n        Parser.prototype.parseBinding = function (input, location, absoluteOffset, interpolationConfig) {\n            if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }\n            var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n            return new ast_1.ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n        };\n        Parser.prototype.checkSimpleExpression = function (ast) {\n            var checker = new this.simpleExpressionChecker();\n            ast.visit(checker);\n            return checker.errors;\n        };\n        Parser.prototype.parseSimpleBinding = function (input, location, absoluteOffset, interpolationConfig) {\n            if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }\n            var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n            var errors = this.checkSimpleExpression(ast);\n            if (errors.length > 0) {\n                this._reportError(\"Host binding expression cannot contain \" + errors.join(' '), input, location);\n            }\n            return new ast_1.ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n        };\n        Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {\n            this.errors.push(new ast_1.ParserError(message, input, errLocation, ctxLocation));\n        };\n        Parser.prototype._parseBindingAst = function (input, location, absoluteOffset, interpolationConfig) {\n            // Quotes expressions use 3rd-party expression language. We don't want to use\n            // our lexer or parser for that, so we check for that ahead of time.\n            var quote = this._parseQuote(input, location, absoluteOffset);\n            if (quote != null) {\n                return quote;\n            }\n            this._checkNoInterpolation(input, location, interpolationConfig);\n            var sourceToLex = this._stripComments(input);\n            var tokens = this._lexer.tokenize(sourceToLex);\n            return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\n                .parseChain();\n        };\n        Parser.prototype._parseQuote = function (input, location, absoluteOffset) {\n            if (input == null)\n                return null;\n            var prefixSeparatorIndex = input.indexOf(':');\n            if (prefixSeparatorIndex == -1)\n                return null;\n            var prefix = input.substring(0, prefixSeparatorIndex).trim();\n            if (!lexer_1.isIdentifier(prefix))\n                return null;\n            var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n            var span = new ast_1.ParseSpan(0, input.length);\n            return new ast_1.Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);\n        };\n        /**\n         * Parse microsyntax template expression and return a list of bindings or\n         * parsing errors in case the given expression is invalid.\n         *\n         * For example,\n         * ```\n         *   <div *ngFor=\"let item of items\">\n         *         ^      ^ absoluteValueOffset for `templateValue`\n         *         absoluteKeyOffset for `templateKey`\n         * ```\n         * contains three bindings:\n         * 1. ngFor -> null\n         * 2. item -> NgForOfContext.$implicit\n         * 3. ngForOf -> items\n         *\n         * This is apparent from the de-sugared template:\n         * ```\n         *   <ng-template ngFor let-item [ngForOf]=\"items\">\n         * ```\n         *\n         * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\n         * @param templateValue RHS of the microsyntax attribute\n         * @param templateUrl template filename if it's external, component filename if it's inline\n         * @param absoluteKeyOffset start of the `templateKey`\n         * @param absoluteValueOffset start of the `templateValue`\n         */\n        Parser.prototype.parseTemplateBindings = function (templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n            var tokens = this._lexer.tokenize(templateValue);\n            var parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false /* parseAction */, this.errors, 0 /* relative offset */);\n            return parser.parseTemplateBindings({\n                source: templateKey,\n                span: new ast_1.AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length),\n            });\n        };\n        Parser.prototype.parseInterpolation = function (input, location, absoluteOffset, interpolationConfig) {\n            if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }\n            var _a = this.splitInterpolation(input, location, interpolationConfig), strings = _a.strings, expressions = _a.expressions, offsets = _a.offsets;\n            if (expressions.length === 0)\n                return null;\n            var expressionNodes = [];\n            for (var i = 0; i < expressions.length; ++i) {\n                var expressionText = expressions[i].text;\n                var sourceToLex = this._stripComments(expressionText);\n                var tokens = this._lexer.tokenize(sourceToLex);\n                var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, offsets[i] + (expressionText.length - sourceToLex.length))\n                    .parseChain();\n                expressionNodes.push(ast);\n            }\n            return this.createInterpolationAst(strings.map(function (s) { return s.text; }), expressionNodes, input, location, absoluteOffset);\n        };\n        /**\n         * Similar to `parseInterpolation`, but treats the provided string as a single expression\n         * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n         * This is used for parsing the switch expression in ICUs.\n         */\n        Parser.prototype.parseInterpolationExpression = function (expression, location, absoluteOffset) {\n            var sourceToLex = this._stripComments(expression);\n            var tokens = this._lexer.tokenize(sourceToLex);\n            var ast = new _ParseAST(expression, location, absoluteOffset, tokens, sourceToLex.length, \n            /* parseAction */ false, this.errors, 0)\n                .parseChain();\n            var strings = ['', '']; // The prefix and suffix strings are both empty\n            return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n        };\n        Parser.prototype.createInterpolationAst = function (strings, expressions, input, location, absoluteOffset) {\n            var span = new ast_1.ParseSpan(0, input.length);\n            var interpolation = new ast_1.Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);\n            return new ast_1.ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n        };\n        /**\n         * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\n         * the string.\n         * Returns `null` if there are no interpolations, otherwise a\n         * `SplitInterpolation` with splits that look like\n         *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\n         */\n        Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {\n            if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }\n            var strings = [];\n            var expressions = [];\n            var offsets = [];\n            var i = 0;\n            var atInterpolation = false;\n            var extendLastString = false;\n            var interpStart = interpolationConfig.start, interpEnd = interpolationConfig.end;\n            while (i < input.length) {\n                if (!atInterpolation) {\n                    // parse until starting {{\n                    var start = i;\n                    i = input.indexOf(interpStart, i);\n                    if (i === -1) {\n                        i = input.length;\n                    }\n                    var text = input.substring(start, i);\n                    strings.push({ text: text, start: start, end: i });\n                    atInterpolation = true;\n                }\n                else {\n                    // parse from starting {{ to ending }} while ignoring content inside quotes.\n                    var fullStart = i;\n                    var exprStart = fullStart + interpStart.length;\n                    var exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n                    if (exprEnd === -1) {\n                        // Could not find the end of the interpolation; do not parse an expression.\n                        // Instead we should extend the content on the last raw string.\n                        atInterpolation = false;\n                        extendLastString = true;\n                        break;\n                    }\n                    var fullEnd = exprEnd + interpEnd.length;\n                    var text = input.substring(exprStart, exprEnd);\n                    if (text.trim().length === 0) {\n                        this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \" + i + \" in\", location);\n                    }\n                    expressions.push({ text: text, start: fullStart, end: fullEnd });\n                    offsets.push(exprStart);\n                    i = fullEnd;\n                    atInterpolation = false;\n                }\n            }\n            if (!atInterpolation) {\n                // If we are now at a text section, add the remaining content as a raw string.\n                if (extendLastString) {\n                    var piece = strings[strings.length - 1];\n                    piece.text += input.substring(i);\n                    piece.end = input.length;\n                }\n                else {\n                    strings.push({ text: input.substring(i), start: i, end: input.length });\n                }\n            }\n            return new SplitInterpolation(strings, expressions, offsets);\n        };\n        Parser.prototype.wrapLiteralPrimitive = function (input, location, absoluteOffset) {\n            var span = new ast_1.ParseSpan(0, input == null ? 0 : input.length);\n            return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n        };\n        Parser.prototype._stripComments = function (input) {\n            var i = this._commentStart(input);\n            return i != null ? input.substring(0, i).trim() : input;\n        };\n        Parser.prototype._commentStart = function (input) {\n            var outerQuote = null;\n            for (var i = 0; i < input.length - 1; i++) {\n                var char = input.charCodeAt(i);\n                var nextChar = input.charCodeAt(i + 1);\n                if (char === chars.$SLASH && nextChar == chars.$SLASH && outerQuote == null)\n                    return i;\n                if (outerQuote === char) {\n                    outerQuote = null;\n                }\n                else if (outerQuote == null && lexer_1.isQuote(char)) {\n                    outerQuote = char;\n                }\n            }\n            return null;\n        };\n        Parser.prototype._checkNoInterpolation = function (input, location, _a) {\n            var e_1, _b;\n            var start = _a.start, end = _a.end;\n            var startIndex = -1;\n            var endIndex = -1;\n            try {\n                for (var _c = tslib_1.__values(this._forEachUnquotedChar(input, 0)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var charIndex = _d.value;\n                    if (startIndex === -1) {\n                        if (input.startsWith(start)) {\n                            startIndex = charIndex;\n                        }\n                    }\n                    else {\n                        endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n                        if (endIndex > -1) {\n                            break;\n                        }\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (startIndex > -1 && endIndex > -1) {\n                this._reportError(\"Got interpolation (\" + start + end + \") where expression was expected\", input, \"at column \" + startIndex + \" in\", location);\n            }\n        };\n        /**\n         * Finds the index of the end of an interpolation expression\n         * while ignoring comments and quoted content.\n         */\n        Parser.prototype._getInterpolationEndIndex = function (input, expressionEnd, start) {\n            var e_2, _a;\n            try {\n                for (var _b = tslib_1.__values(this._forEachUnquotedChar(input, start)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var charIndex = _c.value;\n                    if (input.startsWith(expressionEnd, charIndex)) {\n                        return charIndex;\n                    }\n                    // Nothing else in the expression matters after we've\n                    // hit a comment so look directly for the end token.\n                    if (input.startsWith('//', charIndex)) {\n                        return input.indexOf(expressionEnd, charIndex);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return -1;\n        };\n        /**\n         * Generator used to iterate over the character indexes of a string that are outside of quotes.\n         * @param input String to loop through.\n         * @param start Index within the string at which to start.\n         */\n        Parser.prototype._forEachUnquotedChar = function (input, start) {\n            var currentQuote, escapeCount, i, char;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        currentQuote = null;\n                        escapeCount = 0;\n                        i = start;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < input.length)) return [3 /*break*/, 6];\n                        char = input[i];\n                        if (!(lexer_1.isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) &&\n                            escapeCount % 2 === 0)) return [3 /*break*/, 2];\n                        currentQuote = currentQuote === null ? char : null;\n                        return [3 /*break*/, 4];\n                    case 2:\n                        if (!(currentQuote === null)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, i];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n                        _a.label = 5;\n                    case 5:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        };\n        return Parser;\n    }());\n    exports.Parser = Parser;\n    var IvyParser = /** @class */ (function (_super) {\n        tslib_1.__extends(IvyParser, _super);\n        function IvyParser() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.simpleExpressionChecker = IvySimpleExpressionChecker;\n            return _this;\n        }\n        return IvyParser;\n    }(Parser));\n    exports.IvyParser = IvyParser;\n    /** Describes a stateful context an expression parser is in. */\n    var ParseContextFlags;\n    (function (ParseContextFlags) {\n        ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n        /**\n         * A Writable context is one in which a value may be written to an lvalue.\n         * For example, after we see a property access, we may expect a write to the\n         * property via the \"=\" operator.\n         *   prop\n         *        ^ possible \"=\" after\n         */\n        ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n    })(ParseContextFlags || (ParseContextFlags = {}));\n    var _ParseAST = /** @class */ (function () {\n        function _ParseAST(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {\n            this.input = input;\n            this.location = location;\n            this.absoluteOffset = absoluteOffset;\n            this.tokens = tokens;\n            this.inputLength = inputLength;\n            this.parseAction = parseAction;\n            this.errors = errors;\n            this.offset = offset;\n            this.rparensExpected = 0;\n            this.rbracketsExpected = 0;\n            this.rbracesExpected = 0;\n            this.context = ParseContextFlags.None;\n            // Cache of expression start and input indeces to the absolute source span they map to, used to\n            // prevent creating superfluous source spans in `sourceSpan`.\n            // A serial of the expression start and input index is used for mapping because both are stateful\n            // and may change for subsequent expressions visited by the parser.\n            this.sourceSpanCache = new Map();\n            this.index = 0;\n        }\n        _ParseAST.prototype.peek = function (offset) {\n            var i = this.index + offset;\n            return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;\n        };\n        Object.defineProperty(_ParseAST.prototype, \"next\", {\n            get: function () {\n                return this.peek(0);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(_ParseAST.prototype, \"atEOF\", {\n            /** Whether all the parser input has been processed. */\n            get: function () {\n                return this.index >= this.tokens.length;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(_ParseAST.prototype, \"inputIndex\", {\n            /**\n             * Index of the next token to be processed, or the end of the last token if all have been\n             * processed.\n             */\n            get: function () {\n                return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(_ParseAST.prototype, \"currentEndIndex\", {\n            /**\n             * End index of the last processed token, or the start of the first token if none have been\n             * processed.\n             */\n            get: function () {\n                if (this.index > 0) {\n                    var curToken = this.peek(-1);\n                    return curToken.end + this.offset;\n                }\n                // No tokens have been processed yet; return the next token's start or the length of the input\n                // if there is no token.\n                if (this.tokens.length === 0) {\n                    return this.inputLength + this.offset;\n                }\n                return this.next.index + this.offset;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(_ParseAST.prototype, \"currentAbsoluteOffset\", {\n            /**\n             * Returns the absolute offset of the start of the current token.\n             */\n            get: function () {\n                return this.absoluteOffset + this.inputIndex;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\n         * provided).\n         *\n         * @param start Position from which the `ParseSpan` will start.\n         * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\n         *     natural ending index)\n         */\n        _ParseAST.prototype.span = function (start, artificialEndIndex) {\n            var endIndex = this.currentEndIndex;\n            if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n                endIndex = artificialEndIndex;\n            }\n            // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n            // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n            // appears to be a deep-seated parser bug.\n            //\n            // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n            // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n            if (start > endIndex) {\n                var tmp = endIndex;\n                endIndex = start;\n                start = tmp;\n            }\n            return new ast_1.ParseSpan(start, endIndex);\n        };\n        _ParseAST.prototype.sourceSpan = function (start, artificialEndIndex) {\n            var serial = start + \"@\" + this.inputIndex + \":\" + artificialEndIndex;\n            if (!this.sourceSpanCache.has(serial)) {\n                this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n            }\n            return this.sourceSpanCache.get(serial);\n        };\n        _ParseAST.prototype.advance = function () {\n            this.index++;\n        };\n        /**\n         * Executes a callback in the provided context.\n         */\n        _ParseAST.prototype.withContext = function (context, cb) {\n            this.context |= context;\n            var ret = cb();\n            this.context ^= context;\n            return ret;\n        };\n        _ParseAST.prototype.consumeOptionalCharacter = function (code) {\n            if (this.next.isCharacter(code)) {\n                this.advance();\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        _ParseAST.prototype.peekKeywordLet = function () {\n            return this.next.isKeywordLet();\n        };\n        _ParseAST.prototype.peekKeywordAs = function () {\n            return this.next.isKeywordAs();\n        };\n        /**\n         * Consumes an expected character, otherwise emits an error about the missing expected character\n         * and skips over the token stream until reaching a recoverable point.\n         *\n         * See `this.error` and `this.skip` for more details.\n         */\n        _ParseAST.prototype.expectCharacter = function (code) {\n            if (this.consumeOptionalCharacter(code))\n                return;\n            this.error(\"Missing expected \" + String.fromCharCode(code));\n        };\n        _ParseAST.prototype.consumeOptionalOperator = function (op) {\n            if (this.next.isOperator(op)) {\n                this.advance();\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        _ParseAST.prototype.expectOperator = function (operator) {\n            if (this.consumeOptionalOperator(operator))\n                return;\n            this.error(\"Missing expected operator \" + operator);\n        };\n        _ParseAST.prototype.prettyPrintToken = function (tok) {\n            return tok === lexer_1.EOF ? 'end of input' : \"token \" + tok;\n        };\n        _ParseAST.prototype.expectIdentifierOrKeyword = function () {\n            var n = this.next;\n            if (!n.isIdentifier() && !n.isKeyword()) {\n                if (n.isPrivateIdentifier()) {\n                    this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n                }\n                else {\n                    this.error(\"Unexpected \" + this.prettyPrintToken(n) + \", expected identifier or keyword\");\n                }\n                return null;\n            }\n            this.advance();\n            return n.toString();\n        };\n        _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {\n            var n = this.next;\n            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n                if (n.isPrivateIdentifier()) {\n                    this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n                }\n                else {\n                    this.error(\"Unexpected \" + this.prettyPrintToken(n) + \", expected identifier, keyword, or string\");\n                }\n                return '';\n            }\n            this.advance();\n            return n.toString();\n        };\n        _ParseAST.prototype.parseChain = function () {\n            var exprs = [];\n            var start = this.inputIndex;\n            while (this.index < this.tokens.length) {\n                var expr = this.parsePipe();\n                exprs.push(expr);\n                if (this.consumeOptionalCharacter(chars.$SEMICOLON)) {\n                    if (!this.parseAction) {\n                        this.error('Binding expression cannot contain chained expression');\n                    }\n                    while (this.consumeOptionalCharacter(chars.$SEMICOLON)) {\n                    } // read all semicolons\n                }\n                else if (this.index < this.tokens.length) {\n                    this.error(\"Unexpected token '\" + this.next + \"'\");\n                }\n            }\n            if (exprs.length == 0) {\n                // We have no expressions so create an empty expression that spans the entire input length\n                var artificialStart = this.offset;\n                var artificialEnd = this.offset + this.inputLength;\n                return new ast_1.EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n            }\n            if (exprs.length == 1)\n                return exprs[0];\n            return new ast_1.Chain(this.span(start), this.sourceSpan(start), exprs);\n        };\n        _ParseAST.prototype.parsePipe = function () {\n            var start = this.inputIndex;\n            var result = this.parseExpression();\n            if (this.consumeOptionalOperator('|')) {\n                if (this.parseAction) {\n                    this.error('Cannot have a pipe in an action expression');\n                }\n                do {\n                    var nameStart = this.inputIndex;\n                    var nameId = this.expectIdentifierOrKeyword();\n                    var nameSpan = void 0;\n                    var fullSpanEnd = undefined;\n                    if (nameId !== null) {\n                        nameSpan = this.sourceSpan(nameStart);\n                    }\n                    else {\n                        // No valid identifier was found, so we'll assume an empty pipe name ('').\n                        nameId = '';\n                        // However, there may have been whitespace present between the pipe character and the next\n                        // token in the sequence (or the end of input). We want to track this whitespace so that\n                        // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n                        // whitespace beyond it. Another way of thinking about this is that the zero-length name\n                        // is assumed to be at the end of any whitespace beyond the pipe character.\n                        //\n                        // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n                        // beginning of the next token, or until the end of input if the next token is EOF.\n                        fullSpanEnd = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset;\n                        // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n                        // beyond the pipe character.\n                        nameSpan = new ast_1.ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n                    }\n                    var args = [];\n                    while (this.consumeOptionalCharacter(chars.$COLON)) {\n                        args.push(this.parseExpression());\n                        // If there are additional expressions beyond the name, then the artificial end for the\n                        // name is no longer relevant.\n                    }\n                    result = new ast_1.BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n                } while (this.consumeOptionalOperator('|'));\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseExpression = function () {\n            return this.parseConditional();\n        };\n        _ParseAST.prototype.parseConditional = function () {\n            var start = this.inputIndex;\n            var result = this.parseLogicalOr();\n            if (this.consumeOptionalOperator('?')) {\n                var yes = this.parsePipe();\n                var no = void 0;\n                if (!this.consumeOptionalCharacter(chars.$COLON)) {\n                    var end = this.inputIndex;\n                    var expression = this.input.substring(start, end);\n                    this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n                    no = new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n                }\n                else {\n                    no = this.parsePipe();\n                }\n                return new ast_1.Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n            }\n            else {\n                return result;\n            }\n        };\n        _ParseAST.prototype.parseLogicalOr = function () {\n            // '||'\n            var start = this.inputIndex;\n            var result = this.parseLogicalAnd();\n            while (this.consumeOptionalOperator('||')) {\n                var right = this.parseLogicalAnd();\n                result = new ast_1.Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseLogicalAnd = function () {\n            // '&&'\n            var start = this.inputIndex;\n            var result = this.parseNullishCoalescing();\n            while (this.consumeOptionalOperator('&&')) {\n                var right = this.parseNullishCoalescing();\n                result = new ast_1.Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseNullishCoalescing = function () {\n            // '??'\n            var start = this.inputIndex;\n            var result = this.parseEquality();\n            while (this.consumeOptionalOperator('??')) {\n                var right = this.parseEquality();\n                result = new ast_1.Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseEquality = function () {\n            // '==','!=','===','!=='\n            var start = this.inputIndex;\n            var result = this.parseRelational();\n            while (this.next.type == lexer_1.TokenType.Operator) {\n                var operator = this.next.strValue;\n                switch (operator) {\n                    case '==':\n                    case '===':\n                    case '!=':\n                    case '!==':\n                        this.advance();\n                        var right = this.parseRelational();\n                        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseRelational = function () {\n            // '<', '>', '<=', '>='\n            var start = this.inputIndex;\n            var result = this.parseAdditive();\n            while (this.next.type == lexer_1.TokenType.Operator) {\n                var operator = this.next.strValue;\n                switch (operator) {\n                    case '<':\n                    case '>':\n                    case '<=':\n                    case '>=':\n                        this.advance();\n                        var right = this.parseAdditive();\n                        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseAdditive = function () {\n            // '+', '-'\n            var start = this.inputIndex;\n            var result = this.parseMultiplicative();\n            while (this.next.type == lexer_1.TokenType.Operator) {\n                var operator = this.next.strValue;\n                switch (operator) {\n                    case '+':\n                    case '-':\n                        this.advance();\n                        var right = this.parseMultiplicative();\n                        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n        _ParseAST.prototype.parseMultiplicative = function () {\n            // '*', '%', '/'\n            var start = this.inputIndex;\n            var result = this.parsePrefix();\n            while (this.next.type == lexer_1.TokenType.Operator) {\n                var operator = this.next.strValue;\n                switch (operator) {\n                    case '*':\n                    case '%':\n                    case '/':\n                        this.advance();\n                        var right = this.parsePrefix();\n                        result = new ast_1.Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n        _ParseAST.prototype.parsePrefix = function () {\n            if (this.next.type == lexer_1.TokenType.Operator) {\n                var start = this.inputIndex;\n                var operator = this.next.strValue;\n                var result = void 0;\n                switch (operator) {\n                    case '+':\n                        this.advance();\n                        result = this.parsePrefix();\n                        return ast_1.Unary.createPlus(this.span(start), this.sourceSpan(start), result);\n                    case '-':\n                        this.advance();\n                        result = this.parsePrefix();\n                        return ast_1.Unary.createMinus(this.span(start), this.sourceSpan(start), result);\n                    case '!':\n                        this.advance();\n                        result = this.parsePrefix();\n                        return new ast_1.PrefixNot(this.span(start), this.sourceSpan(start), result);\n                }\n            }\n            return this.parseCallChain();\n        };\n        _ParseAST.prototype.parseCallChain = function () {\n            var start = this.inputIndex;\n            var result = this.parsePrimary();\n            while (true) {\n                if (this.consumeOptionalCharacter(chars.$PERIOD)) {\n                    result = this.parseAccessMemberOrMethodCall(result, start, false);\n                }\n                else if (this.consumeOptionalOperator('?.')) {\n                    result = this.consumeOptionalCharacter(chars.$LBRACKET) ?\n                        this.parseKeyedReadOrWrite(result, start, true) :\n                        this.parseAccessMemberOrMethodCall(result, start, true);\n                }\n                else if (this.consumeOptionalCharacter(chars.$LBRACKET)) {\n                    result = this.parseKeyedReadOrWrite(result, start, false);\n                }\n                else if (this.consumeOptionalCharacter(chars.$LPAREN)) {\n                    this.rparensExpected++;\n                    var args = this.parseCallArguments();\n                    this.rparensExpected--;\n                    this.expectCharacter(chars.$RPAREN);\n                    result = new ast_1.FunctionCall(this.span(start), this.sourceSpan(start), result, args);\n                }\n                else if (this.consumeOptionalOperator('!')) {\n                    result = new ast_1.NonNullAssert(this.span(start), this.sourceSpan(start), result);\n                }\n                else {\n                    return result;\n                }\n            }\n        };\n        _ParseAST.prototype.parsePrimary = function () {\n            var start = this.inputIndex;\n            if (this.consumeOptionalCharacter(chars.$LPAREN)) {\n                this.rparensExpected++;\n                var result = this.parsePipe();\n                this.rparensExpected--;\n                this.expectCharacter(chars.$RPAREN);\n                return result;\n            }\n            else if (this.next.isKeywordNull()) {\n                this.advance();\n                return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n            }\n            else if (this.next.isKeywordUndefined()) {\n                this.advance();\n                return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n            }\n            else if (this.next.isKeywordTrue()) {\n                this.advance();\n                return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n            }\n            else if (this.next.isKeywordFalse()) {\n                this.advance();\n                return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n            }\n            else if (this.next.isKeywordThis()) {\n                this.advance();\n                return new ast_1.ThisReceiver(this.span(start), this.sourceSpan(start));\n            }\n            else if (this.consumeOptionalCharacter(chars.$LBRACKET)) {\n                this.rbracketsExpected++;\n                var elements = this.parseExpressionList(chars.$RBRACKET);\n                this.rbracketsExpected--;\n                this.expectCharacter(chars.$RBRACKET);\n                return new ast_1.LiteralArray(this.span(start), this.sourceSpan(start), elements);\n            }\n            else if (this.next.isCharacter(chars.$LBRACE)) {\n                return this.parseLiteralMap();\n            }\n            else if (this.next.isIdentifier()) {\n                return this.parseAccessMemberOrMethodCall(new ast_1.ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n            }\n            else if (this.next.isNumber()) {\n                var value = this.next.toNumber();\n                this.advance();\n                return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n            }\n            else if (this.next.isString()) {\n                var literalValue = this.next.toString();\n                this.advance();\n                return new ast_1.LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n            }\n            else if (this.next.isPrivateIdentifier()) {\n                this._reportErrorForPrivateIdentifier(this.next, null);\n                return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n            }\n            else if (this.index >= this.tokens.length) {\n                this.error(\"Unexpected end of expression: \" + this.input);\n                return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n            }\n            else {\n                this.error(\"Unexpected token \" + this.next);\n                return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n            }\n        };\n        _ParseAST.prototype.parseExpressionList = function (terminator) {\n            var result = [];\n            do {\n                if (!this.next.isCharacter(terminator)) {\n                    result.push(this.parsePipe());\n                }\n                else {\n                    break;\n                }\n            } while (this.consumeOptionalCharacter(chars.$COMMA));\n            return result;\n        };\n        _ParseAST.prototype.parseLiteralMap = function () {\n            var keys = [];\n            var values = [];\n            var start = this.inputIndex;\n            this.expectCharacter(chars.$LBRACE);\n            if (!this.consumeOptionalCharacter(chars.$RBRACE)) {\n                this.rbracesExpected++;\n                do {\n                    var keyStart = this.inputIndex;\n                    var quoted = this.next.isString();\n                    var key = this.expectIdentifierOrKeywordOrString();\n                    keys.push({ key: key, quoted: quoted });\n                    // Properties with quoted keys can't use the shorthand syntax.\n                    if (quoted) {\n                        this.expectCharacter(chars.$COLON);\n                        values.push(this.parsePipe());\n                    }\n                    else if (this.consumeOptionalCharacter(chars.$COLON)) {\n                        values.push(this.parsePipe());\n                    }\n                    else {\n                        var span = this.span(keyStart);\n                        var sourceSpan = this.sourceSpan(keyStart);\n                        values.push(new ast_1.PropertyRead(span, sourceSpan, sourceSpan, new ast_1.ImplicitReceiver(span, sourceSpan), key));\n                    }\n                } while (this.consumeOptionalCharacter(chars.$COMMA));\n                this.rbracesExpected--;\n                this.expectCharacter(chars.$RBRACE);\n            }\n            return new ast_1.LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n        };\n        _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, start, isSafe) {\n            var _this = this;\n            var nameStart = this.inputIndex;\n            var id = this.withContext(ParseContextFlags.Writable, function () {\n                var _a;\n                var id = (_a = _this.expectIdentifierOrKeyword()) !== null && _a !== void 0 ? _a : '';\n                if (id.length === 0) {\n                    _this.error(\"Expected identifier for property access\", receiver.span.end);\n                }\n                return id;\n            });\n            var nameSpan = this.sourceSpan(nameStart);\n            if (this.consumeOptionalCharacter(chars.$LPAREN)) {\n                var argumentStart = this.inputIndex;\n                this.rparensExpected++;\n                var args = this.parseCallArguments();\n                var argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n                this.expectCharacter(chars.$RPAREN);\n                this.rparensExpected--;\n                var span = this.span(start);\n                var sourceSpan = this.sourceSpan(start);\n                return isSafe ?\n                    new ast_1.SafeMethodCall(span, sourceSpan, nameSpan, receiver, id, args, argumentSpan) :\n                    new ast_1.MethodCall(span, sourceSpan, nameSpan, receiver, id, args, argumentSpan);\n            }\n            else {\n                if (isSafe) {\n                    if (this.consumeOptionalOperator('=')) {\n                        this.error('The \\'?.\\' operator cannot be used in the assignment');\n                        return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n                    }\n                    else {\n                        return new ast_1.SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);\n                    }\n                }\n                else {\n                    if (this.consumeOptionalOperator('=')) {\n                        if (!this.parseAction) {\n                            this.error('Bindings cannot contain assignments');\n                            return new ast_1.EmptyExpr(this.span(start), this.sourceSpan(start));\n                        }\n                        var value = this.parseConditional();\n                        return new ast_1.PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, receiver, id, value);\n                    }\n                    else {\n                        return new ast_1.PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);\n                    }\n                }\n            }\n        };\n        _ParseAST.prototype.parseCallArguments = function () {\n            if (this.next.isCharacter(chars.$RPAREN))\n                return [];\n            var positionals = [];\n            do {\n                positionals.push(this.parsePipe());\n            } while (this.consumeOptionalCharacter(chars.$COMMA));\n            return positionals;\n        };\n        /**\n         * Parses an identifier, a keyword, a string with an optional `-` in between,\n         * and returns the string along with its absolute source span.\n         */\n        _ParseAST.prototype.expectTemplateBindingKey = function () {\n            var result = '';\n            var operatorFound = false;\n            var start = this.currentAbsoluteOffset;\n            do {\n                result += this.expectIdentifierOrKeywordOrString();\n                operatorFound = this.consumeOptionalOperator('-');\n                if (operatorFound) {\n                    result += '-';\n                }\n            } while (operatorFound);\n            return {\n                source: result,\n                span: new ast_1.AbsoluteSourceSpan(start, start + result.length),\n            };\n        };\n        /**\n         * Parse microsyntax template expression and return a list of bindings or\n         * parsing errors in case the given expression is invalid.\n         *\n         * For example,\n         * ```\n         *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\n         * ```\n         * contains five bindings:\n         * 1. ngFor -> null\n         * 2. item -> NgForOfContext.$implicit\n         * 3. ngForOf -> items\n         * 4. i -> NgForOfContext.index\n         * 5. ngForTrackBy -> func\n         *\n         * For a full description of the microsyntax grammar, see\n         * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n         *\n         * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\n         * without the *, along with its absolute span.\n         */\n        _ParseAST.prototype.parseTemplateBindings = function (templateKey) {\n            var bindings = [];\n            // The first binding is for the template key itself\n            // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n            // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n            bindings.push.apply(bindings, tslib_1.__spreadArray([], tslib_1.__read(this.parseDirectiveKeywordBindings(templateKey))));\n            while (this.index < this.tokens.length) {\n                // If it starts with 'let', then this must be variable declaration\n                var letBinding = this.parseLetBinding();\n                if (letBinding) {\n                    bindings.push(letBinding);\n                }\n                else {\n                    // Two possible cases here, either `value \"as\" key` or\n                    // \"directive-keyword expression\". We don't know which case, but both\n                    // \"value\" and \"directive-keyword\" are template binding key, so consume\n                    // the key first.\n                    var key = this.expectTemplateBindingKey();\n                    // Peek at the next token, if it is \"as\" then this must be variable\n                    // declaration.\n                    var binding = this.parseAsBinding(key);\n                    if (binding) {\n                        bindings.push(binding);\n                    }\n                    else {\n                        // Otherwise the key must be a directive keyword, like \"of\". Transform\n                        // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n                        key.source =\n                            templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n                        bindings.push.apply(bindings, tslib_1.__spreadArray([], tslib_1.__read(this.parseDirectiveKeywordBindings(key))));\n                    }\n                }\n                this.consumeStatementTerminator();\n            }\n            return new TemplateBindingParseResult(bindings, [] /* warnings */, this.errors);\n        };\n        _ParseAST.prototype.parseKeyedReadOrWrite = function (receiver, start, isSafe) {\n            var _this = this;\n            return this.withContext(ParseContextFlags.Writable, function () {\n                _this.rbracketsExpected++;\n                var key = _this.parsePipe();\n                if (key instanceof ast_1.EmptyExpr) {\n                    _this.error(\"Key access cannot be empty\");\n                }\n                _this.rbracketsExpected--;\n                _this.expectCharacter(chars.$RBRACKET);\n                if (_this.consumeOptionalOperator('=')) {\n                    if (isSafe) {\n                        _this.error('The \\'?.\\' operator cannot be used in the assignment');\n                    }\n                    else {\n                        var value = _this.parseConditional();\n                        return new ast_1.KeyedWrite(_this.span(start), _this.sourceSpan(start), receiver, key, value);\n                    }\n                }\n                else {\n                    return isSafe ? new ast_1.SafeKeyedRead(_this.span(start), _this.sourceSpan(start), receiver, key) :\n                        new ast_1.KeyedRead(_this.span(start), _this.sourceSpan(start), receiver, key);\n                }\n                return new ast_1.EmptyExpr(_this.span(start), _this.sourceSpan(start));\n            });\n        };\n        /**\n         * Parse a directive keyword, followed by a mandatory expression.\n         * For example, \"of items\", \"trackBy: func\".\n         * The bindings are: ngForOf -> items, ngForTrackBy -> func\n         * There could be an optional \"as\" binding that follows the expression.\n         * For example,\n         * ```\n         *   *ngFor=\"let item of items | slice:0:1 as collection\".\n         *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\n         *               keyword    bound target   optional 'as' binding\n         * ```\n         *\n         * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\n         * absolute span.\n         */\n        _ParseAST.prototype.parseDirectiveKeywordBindings = function (key) {\n            var bindings = [];\n            this.consumeOptionalCharacter(chars.$COLON); // trackBy: trackByFunction\n            var value = this.getDirectiveBoundTarget();\n            var spanEnd = this.currentAbsoluteOffset;\n            // The binding could optionally be followed by \"as\". For example,\n            // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n            // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n            // 'key' in the current context now becomes the \"value\" in the next binding.\n            var asBinding = this.parseAsBinding(key);\n            if (!asBinding) {\n                this.consumeStatementTerminator();\n                spanEnd = this.currentAbsoluteOffset;\n            }\n            var sourceSpan = new ast_1.AbsoluteSourceSpan(key.span.start, spanEnd);\n            bindings.push(new ast_1.ExpressionBinding(sourceSpan, key, value));\n            if (asBinding) {\n                bindings.push(asBinding);\n            }\n            return bindings;\n        };\n        /**\n         * Return the expression AST for the bound target of a directive keyword\n         * binding. For example,\n         * ```\n         *   *ngIf=\"condition | pipe\"\n         *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\n         *   *ngFor=\"let item of items\"\n         *                       ^^^^^ bound target for \"ngForOf\"\n         * ```\n         */\n        _ParseAST.prototype.getDirectiveBoundTarget = function () {\n            if (this.next === lexer_1.EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n                return null;\n            }\n            var ast = this.parsePipe(); // example: \"condition | async\"\n            var _a = ast.span, start = _a.start, end = _a.end;\n            var value = this.input.substring(start, end);\n            return new ast_1.ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n        };\n        /**\n         * Return the binding for a variable declared using `as`. Note that the order\n         * of the key-value pair in this declaration is reversed. For example,\n         * ```\n         *   *ngFor=\"let item of items; index as i\"\n         *                              ^^^^^    ^\n         *                              value    key\n         * ```\n         *\n         * @param value name of the value in the declaration, \"ngIf\" in the example\n         * above, along with its absolute span.\n         */\n        _ParseAST.prototype.parseAsBinding = function (value) {\n            if (!this.peekKeywordAs()) {\n                return null;\n            }\n            this.advance(); // consume the 'as' keyword\n            var key = this.expectTemplateBindingKey();\n            this.consumeStatementTerminator();\n            var sourceSpan = new ast_1.AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n            return new ast_1.VariableBinding(sourceSpan, key, value);\n        };\n        /**\n         * Return the binding for a variable declared using `let`. For example,\n         * ```\n         *   *ngFor=\"let item of items; let i=index;\"\n         *           ^^^^^^^^           ^^^^^^^^^^^\n         * ```\n         * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\n         * In the second binding, `i` is bound to `NgForOfContext.index`.\n         */\n        _ParseAST.prototype.parseLetBinding = function () {\n            if (!this.peekKeywordLet()) {\n                return null;\n            }\n            var spanStart = this.currentAbsoluteOffset;\n            this.advance(); // consume the 'let' keyword\n            var key = this.expectTemplateBindingKey();\n            var value = null;\n            if (this.consumeOptionalOperator('=')) {\n                value = this.expectTemplateBindingKey();\n            }\n            this.consumeStatementTerminator();\n            var sourceSpan = new ast_1.AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n            return new ast_1.VariableBinding(sourceSpan, key, value);\n        };\n        /**\n         * Consume the optional statement terminator: semicolon or comma.\n         */\n        _ParseAST.prototype.consumeStatementTerminator = function () {\n            this.consumeOptionalCharacter(chars.$SEMICOLON) || this.consumeOptionalCharacter(chars.$COMMA);\n        };\n        /**\n         * Records an error and skips over the token stream until reaching a recoverable point. See\n         * `this.skip` for more details on token skipping.\n         */\n        _ParseAST.prototype.error = function (message, index) {\n            if (index === void 0) { index = null; }\n            this.errors.push(new ast_1.ParserError(message, this.input, this.locationText(index), this.location));\n            this.skip();\n        };\n        _ParseAST.prototype.locationText = function (index) {\n            if (index === void 0) { index = null; }\n            if (index == null)\n                index = this.index;\n            return (index < this.tokens.length) ? \"at column \" + (this.tokens[index].index + 1) + \" in\" :\n                \"at the end of the expression\";\n        };\n        /**\n         * Records an error for an unexpected private identifier being discovered.\n         * @param token Token representing a private identifier.\n         * @param extraMessage Optional additional message being appended to the error.\n         */\n        _ParseAST.prototype._reportErrorForPrivateIdentifier = function (token, extraMessage) {\n            var errorMessage = \"Private identifiers are not supported. Unexpected private identifier: \" + token;\n            if (extraMessage !== null) {\n                errorMessage += \", \" + extraMessage;\n            }\n            this.error(errorMessage);\n        };\n        /**\n         * Error recovery should skip tokens until it encounters a recovery point.\n         *\n         * The following are treated as unconditional recovery points:\n         *   - end of input\n         *   - ';' (parseChain() is always the root production, and it expects a ';')\n         *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\n         *\n         * The following are conditional recovery points:\n         *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\n         *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\n         *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\n         *       an '(' <expr> ')' production).\n         *       The recovery points of grouping symbols must be conditional as they must be skipped if\n         *       none of the calling productions are not expecting the closing token else we will never\n         *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\n         *       That is, we skip a closing symbol if we are not in a grouping production.\n         *   - '=' in a `Writable` context\n         *     - In this context, we are able to recover after seeing the `=` operator, which\n         *       signals the presence of an independent rvalue expression following the `=` operator.\n         *\n         * If a production expects one of these token it increments the corresponding nesting count,\n         * and then decrements it just prior to checking if the token is in the input.\n         */\n        _ParseAST.prototype.skip = function () {\n            var n = this.next;\n            while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) &&\n                !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) &&\n                (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) &&\n                (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET)) &&\n                (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n                if (this.next.isError()) {\n                    this.errors.push(new ast_1.ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n                }\n                this.advance();\n                n = this.next;\n            }\n        };\n        return _ParseAST;\n    }());\n    exports._ParseAST = _ParseAST;\n    var SimpleExpressionChecker = /** @class */ (function () {\n        function SimpleExpressionChecker() {\n            this.errors = [];\n        }\n        SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitThisReceiver = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) {\n            this.visitAll(ast.expressions, context);\n        };\n        SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) {\n            this.visitAll(ast.values, context);\n        };\n        SimpleExpressionChecker.prototype.visitUnary = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitNonNullAssert = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitPipe = function (ast, context) {\n            this.errors.push('pipes');\n        };\n        SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitAll = function (asts, context) {\n            var _this = this;\n            return asts.map(function (node) { return node.visit(_this, context); });\n        };\n        SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };\n        SimpleExpressionChecker.prototype.visitSafeKeyedRead = function (ast, context) { };\n        return SimpleExpressionChecker;\n    }());\n    /**\n     * This class implements SimpleExpressionChecker used in View Engine and performs more strict checks\n     * to make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is\n     * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at\n     * compile time. In order to preserve View Engine behavior, more strict checks are introduced for\n     * Ivy mode only.\n     */\n    var IvySimpleExpressionChecker = /** @class */ (function (_super) {\n        tslib_1.__extends(IvySimpleExpressionChecker, _super);\n        function IvySimpleExpressionChecker() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.errors = [];\n            return _this;\n        }\n        IvySimpleExpressionChecker.prototype.visitPipe = function () {\n            this.errors.push('pipes');\n        };\n        return IvySimpleExpressionChecker;\n    }(ast_1.RecursiveAstVisitor));\n});\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}